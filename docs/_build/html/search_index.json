{
  "pages": [
    {
      "path": "developer/architecture.md",
      "title": "Architecture Overview",
      "description": "System design and technical architecture of Westfall Personal Assistant",
      "category": "developer",
      "tags": [
        "architecture",
        "design",
        "system",
        "technical"
      ],
      "priority": 1,
      "word_count": 1534,
      "last_updated": "2025-09-08",
      "search_text": "architecture overview system design and technical architecture of westfall personal assistant # architecture overview\n\nthis document provides a comprehensive overview of the westfall personal assistant architecture, including system design, component relationships, and technical implementation details.\n\n## system overview\n\nwestfall personal assistant is built as a modular, desktop application using python and pyqt5, designed for security, extensibility, and cross-platform compatibility.\n\n### key architectural principles\n\n- **security first**: all sensitive data encrypted at rest and in transit\n- **modular design**: loosely coupled components for easy maintenance\n- **local-first**: core functionality works without internet connectivity\n- **extensible**: plugin architecture for custom functionality\n- **cross-platform**: consistent experience across windows, macos, and linux\n\n## high-level architecture\n\n```\n┌─────────────────────────────────────────────────────────────┐\n│                    user interface layer                     │\n├─────────────────────────────────────────────────────────────┤\n│                  application services                       │\n├─────────────────────────────────────────────────────────────┤\n│                    core components                          │\n├─────────────────────────────────────────────────────────────┤\n│                  security & storage                         │\n├─────────────────────────────────────────────────────────────┤\n│                   system integration                        │\n└─────────────────────────────────────────────────────────────┘\n```\n\n## component architecture\n\n### 1. user interface layer\n\n**technology**: pyqt5, qml for dynamic components\n\n**components**:\n- `mainwindow` - central application window and navigation\n- `featurewidgets` - individual feature interfaces\n- `helpsystem` - context-sensitive help and documentation\n- `aiassistant` - conversational ai interface\n\n**key features**:\n- single-window design with tabbed navigation\n- responsive layout adapting to window size\n- dark/light theme support\n- accessibility features (screen readers, keyboard navigation)\n\n```python\n# main window structure\nclass mainwindow(qmainwindow):\n    def __init__(self):\n        self.sidebar = navigationsidebar()\n        self.content_area = qstackedwidget()\n        self.ai_assistant = aiassistantwidget()\n        self.help_system = helpsystemwidget()\n```\n\n### 2. application services\n\n**purpose**: business logic and feature orchestration\n\n**services**:\n- `featuremanager` - feature lifecycle and state management\n- `eventbus` - inter-component communication\n- `configurationservice` - application settings and preferences\n- `notificationservice` - user notifications and alerts\n- `searchservice` - global search across all features\n\n```python\n# service architecture example\nclass servicecontainer:\n    def __init__(self):\n        self.feature_manager = featuremanager()\n        self.event_bus = eventbus()\n        self.config = configurationservice()\n        self.notifications = notificationservice()\n        self.search = searchservice()\n```\n\n### 3. core components\n\n#### 3.1 feature modules\n\neach feature is implemented as a self-contained module:\n\n```\nfeatures/\n├── password_manager/\n│   ├── __init__.py\n│   ├── models.py      # data models\n│   ├── views.py       # ui components  \n│   ├── controllers.py # business logic\n│   └── storage.py     # data persistence\n├── email_client/\n├── note_manager/\n├── finance_tracker/\n└── ...\n```\n\n**base feature interface**:\n```python\nclass basefeature(abc):\n    @abstractmethod\n    def initialize(self) -> bool:\n        \"\"\"initialize feature resources\"\"\"\n        \n    @abstractmethod\n    def shutdown(self) -> bool:\n        \"\"\"cleanup feature resources\"\"\"\n        \n    @abstractmethod\n    def get_widget(self) -> qwidget:\n        \"\"\"return main ui widget\"\"\"\n```\n\n#### 3.2 ai integration system\n\n**components**:\n- `aimanager` - central ai coordination\n- `localmodelmanager` - local ai model handling\n- `cloudaiprovider` - external ai service integration\n- `contextmanager` - context awareness and memory\n- `promptengine` - template and prompt management\n\n```python\n# ai system architecture\nclass aimanager:\n    def __init__(self):\n        self.local_models = localmodelmanager()\n        self.cloud_providers = cloudaiprovider()\n        self.context = contextmanager()\n        self.prompts = promptengine()\n        \n    def process_query(self, query: str, context: dict) -> airesponse:\n        # route to appropriate ai provider\n        # apply context and prompt templates\n        # return structured response\n```\n\n#### 3.3 plugin system\n\n**architecture**: event-driven plugin architecture with sandboxing\n\n```python\nclass pluginmanager:\n    def __init__(self):\n        self.plugins = {}\n        self.hooks = defaultdict(list)\n        self.sandbox = pluginsandbox()\n        \n    def load_plugin(self, plugin_path: str) -> bool:\n        # load and validate plugin\n        # register hooks and event handlers\n        # initialize in sandbox environment\n```\n\n**plugin interface**:\n```python\nclass baseplugin(abc):\n    @abstractmethod\n    def get_info(self) -> plugininfo:\n        \"\"\"return plugin metadata\"\"\"\n        \n    @abstractmethod\n    def initialize(self, app_context: appcontext) -> bool:\n        \"\"\"initialize plugin with app context\"\"\"\n        \n    @abstractmethod\n    def register_hooks(self, hook_manager: hookmanager):\n        \"\"\"register event hooks\"\"\"\n```\n\n### 4. security & storage layer\n\n#### 4.1 security architecture\n\n**encryption strategy**:\n- master password → key derivation (pbkdf2) → encryption keys\n- aes-256-gcm for data encryption\n- rsa-2048 for key exchange (future cloud sync)\n- secure key storage using os keyring\n\n```python\nclass securitymanager:\n    def __init__(self):\n        self.crypto = cryptographyengine()\n        self.key_manager = keymanager()\n        self.session = sessionmanager()\n        \n    def encrypt_data(self, data: bytes, key_id: str) -> bytes:\n        # get encryption key\n        # encrypt with aes-256-gcm\n        # return encrypted data with metadata\n```\n\n#### 4.2 storage architecture\n\n**database design**: sqlalchemy orm with sqlite backend\n\n```\ndatabase schema:\n├── users (master password hash, settings)\n├── features (feature-specific tables)\n├── encryption_metadata (key info, version)\n├── audit_log (security events)\n└── plugins (plugin data)\n```\n\n**storage abstraction**:\n```python\nclass storagemanager:\n    def __init__(self):\n        self.db_engine = create_engine(database_url)\n        self.session_factory = sessionmaker(bind=self.db_engine)\n        self.encryptor = dataencryptor()\n        \n    def store_encrypted(self, table: str, data: dict) -> bool:\n        # encrypt sensitive fields\n        # store in database\n        # update audit log\n```\n\n### 5. system integration layer\n\n#### 5.1 external service integration\n\n**api gateway pattern** for external services:\n\n```python\nclass apigateway:\n    def __init__(self):\n        self.providers = {\n            'openai': openaiprovider(),\n            'weather': weatherprovider(),\n            'news': newsprovider(),\n        }\n        \n    def make_request(self, service: str, endpoint: str, **kwargs):\n        # route to appropriate provider\n        # handle authentication\n        # apply rate limiting\n        # return standardized response\n```\n\n#### 5.2 operating system integration\n\n**platform services**:\n- file system integration\n- notification system\n- system tray/menu bar\n- auto-start registration\n- os keyring access\n\n```python\nclass osintegration:\n    def __init__(self):\n        self.platform = self._detect_platform()\n        self.notifications = self._get_notification_service()\n        self.keyring = self._get_keyring_service()\n```\n\n## data flow architecture\n\n### 1. user interaction flow\n\n```\nuser input → ui component → feature controller → business logic → storage layer\n    ↓                                                                     ↓\nai assistant ← context manager ← event bus ← service layer ← security layer\n```\n\n### 2. ai processing flow\n\n```\nuser query → context extraction → prompt engineering → ai provider → response processing → ui update\n     ↓              ↓                     ↓               ↓               ↓              ↓\nhistory storage ← context memory ← template engine ← rate limiting ← result caching ← event logging\n```\n\n### 3. data persistence flow\n\n```\nuser data → validation → encryption → database storage → audit log\n    ↓           ↓           ↓              ↓               ↓\nbackup → compression → key management → transaction → security event\n```\n\n## security architecture\n\n### 1. threat model\n\n**protected against**:\n- data theft from storage\n- network interception\n- memory dumps\n- unauthorized access\n- plugin malicious behavior\n\n**security boundaries**:\n- process isolation for plugins\n- network request validation\n- file system access control\n- memory protection for sensitive data\n\n### 2. encryption implementation\n\n```python\n# layered encryption approach\nclass encryptionlayer:\n    def __init__(self, master_password: str):\n        self.master_key = self._derive_master_key(master_password)\n        self.data_keys = self._generate_data_keys()\n        \n    def encrypt(self, data: bytes, classification: str) -> bytes:\n        # select appropriate key based on data classification\n        # encrypt with aes-256-gcm\n        # add integrity verification\n        # return encrypted blob\n```\n\n### 3. authentication & authorization\n\n```python\nclass authmanager:\n    def __init__(self):\n        self.session = none\n        self.permissions = permissionmanager()\n        \n    def authenticate(self, password: str) -> bool:\n        # verify master password\n        # establish secure session\n        # load user permissions\n        \n    def authorize(self, action: str, resource: str) -> bool:\n        # check user permissions\n        # validate session state\n        # log authorization attempt\n```\n\n## performance architecture\n\n### 1. performance considerations\n\n**memory management**:\n- lazy loading of feature components\n- memory-mapped files for large datasets\n- garbage collection optimization\n- resource pooling for expensive objects\n\n**database optimization**:\n- query optimization with indexes\n- connection pooling\n- prepared statements\n- background maintenance tasks\n\n### 2. caching strategy\n\n```python\nclass cachemanager:\n    def __init__(self):\n        self.memory_cache = lrucache(maxsize=1000)\n        self.disk_cache = diskcache(directory='cache')\n        self.distributed_cache = none  # future: redis\n        \n    def get(self, key: str, fetch_fn: callable = none):\n        # try memory cache first\n        # fall back to disk cache\n        # use fetch function if not found\n        # update caches appropriately\n```\n\n## testing architecture\n\n### 1. testing strategy\n\n**test pyramid**:\n- unit tests for individual components\n- integration tests for feature interactions\n- end-to-end tests for user workflows\n- security tests for encryption and authentication\n\n### 2. test structure\n\n```\ntests/\n├── unit/\n│   ├── test_security.py\n│   ├── test_storage.py\n│   └── test_features/\n├── integration/\n│   ├── test_ai_integration.py\n│   └── test_plugin_system.py\n├── e2e/\n│   └── test_user_workflows.py\n└── security/\n    ├── test_encryption.py\n    └── test_authentication.py\n```\n\n## deployment architecture\n\n### 1. build system\n\n```bash\n# build pipeline\npython setup.py build_ext --inplace\npython -m pyinstaller westfall_assistant.spec\npython tests/validate_build.py\n```\n\n### 2. distribution\n\n**package formats**:\n- windows: `.exe` installer with nsis\n- macos: `.dmg` with signed application bundle\n- linux: `.deb`, `.rpm`, and `.tar.gz` packages\n\n### 3. update system\n\n```python\nclass updatemanager:\n    def __init__(self):\n        self.current_version = get_current_version()\n        self.update_server = updateserver()\n        \n    def check_for_updates(self) -> optional[updateinfo]:\n        # check remote version\n        # compare with current version\n        # verify update signature\n        # return update information\n        \n    def apply_update(self, update_info: updateinfo) -> bool:\n        # download update package\n        # verify integrity and signature\n        # apply update with rollback capability\n        # restart application\n```\n\n## extension points\n\n### 1. plugin hooks\n\n```python\n# available hooks for plugins\nplugin_hooks = {\n    'app.startup': 'called when application starts',\n    'app.shutdown': 'called when application shuts down',\n    'feature.activated': 'called when feature is activated',\n    'ai.query.preprocessed': 'called before ai query processing',\n    'ai.response.postprocessed': 'called after ai response',\n    'data.encrypted': 'called after data encryption',\n    'ui.context_menu': 'called for context menu extension',\n}\n```\n\n### 2. api endpoints\n\n```python\n# internal api for plugins and extensions\nclass internalapi:\n    def __init__(self, app_context: appcontext):\n        self.context = app_context\n        \n    def get_feature_data(self, feature: str) -> dict:\n        \"\"\"get data from specific feature\"\"\"\n        \n    def send_notification(self, message: str, level: str):\n        \"\"\"send notification to user\"\"\"\n        \n    def execute_ai_query(self, query: str, context: dict) -> airesponse:\n        \"\"\"execute ai query with context\"\"\"\n```\n\n## future architecture considerations\n\n### 1. scalability\n\n- multi-instance synchronization\n- cloud storage integration\n- distributed ai processing\n- microservices architecture for large deployments\n\n### 2. mobile integration\n\n- rest api for mobile clients\n- synchronization protocols\n- mobile-optimized interfaces\n- cross-device session management\n\n### 3. collaborative features\n\n- real-time collaboration\n- shared workspaces\n- team permission management\n- conflict resolution for concurrent edits\n\n---\n\n*last updated: september 8, 2025*"
    },
    {
      "path": "reference/commands.md",
      "title": "Command Reference",
      "description": "Complete reference of keyboard shortcuts, voice commands, and CLI options",
      "category": "reference",
      "tags": [
        "commands",
        "shortcuts",
        "reference",
        "keyboard"
      ],
      "priority": 1,
      "word_count": 2250,
      "last_updated": "2025-09-08",
      "search_text": "command reference complete reference of keyboard shortcuts, voice commands, and cli options # command reference\n\ncomplete reference for all commands, keyboard shortcuts, and voice controls available in westfall personal assistant.\n\n## keyboard shortcuts\n\n### global application shortcuts\n\n| shortcut | action | description |\n|----------|--------|-------------|\n| `ctrl+k` | quick search | open command palette and feature search |\n| `ctrl+space` | ai assistant | toggle ai assistant chat window |\n| `f1` | help | show context-sensitive help |\n| `f11` | fullscreen | toggle fullscreen mode |\n| `ctrl+,` | settings | open application settings |\n| `ctrl+q` | quit | close the application |\n| `ctrl+/` | show shortcuts | display all available keyboard shortcuts |\n| `ctrl+d` | dark mode | toggle between light and dark themes |\n| `escape` | close/cancel | close current window or cancel operation |\n| `ctrl+r` | refresh | refresh current feature content |\n\n### navigation shortcuts\n\n| shortcut | action | description |\n|----------|--------|-------------|\n| `ctrl+1` | dashboard | go to main dashboard |\n| `ctrl+2` | ai assistant | open ai assistant |\n| `ctrl+3` | email | open email client |\n| `ctrl+4` | password manager | open password manager |\n| `ctrl+5` | notes | open notes feature |\n| `ctrl+6` | calendar | open calendar |\n| `ctrl+7` | finance | open finance tracker |\n| `ctrl+8` | weather | open weather widget |\n| `ctrl+9` | news | open news reader |\n| `ctrl+0` | settings | open application settings |\n\n### feature-specific shortcuts\n\n#### email client\n| shortcut | action | description |\n|----------|--------|-------------|\n| `ctrl+e` | open email | open email client from anywhere |\n| `ctrl+n` | new email | compose new email |\n| `ctrl+r` | reply | reply to selected email |\n| `ctrl+shift+r` | reply all | reply to all recipients |\n| `ctrl+f` | forward | forward selected email |\n| `delete` | delete email | move selected email to trash |\n| `ctrl+m` | mark read/unread | toggle read status |\n| `ctrl+shift+m` | mark important | toggle important flag |\n| `f5` | sync | synchronize with email server |\n| `ctrl+1-9` | folders | switch to folder 1-9 |\n\n#### password manager\n| shortcut | action | description |\n|----------|--------|-------------|\n| `ctrl+p` | open passwords | open password manager from anywhere |\n| `ctrl+n` | new password | add new password entry |\n| `ctrl+c` | copy password | copy password to clipboard |\n| `ctrl+shift+c` | copy username | copy username to clipboard |\n| `ctrl+alt+c` | copy url | copy website url to clipboard |\n| `f2` | edit entry | edit selected password entry |\n| `delete` | delete entry | delete selected password entry |\n| `ctrl+g` | generate password | generate new secure password |\n| `ctrl+f` | search | search password entries |\n| `ctrl+l` | lock | lock password manager |\n\n#### notes\n| shortcut | action | description |\n|----------|--------|-------------|\n| `ctrl+n` | new note | create new note |\n| `ctrl+s` | save note | save current note |\n| `ctrl+d` | delete note | delete current note |\n| `ctrl+f` | find in note | search within current note |\n| `ctrl+h` | find and replace | find and replace text |\n| `ctrl+b` | bold | make selected text bold |\n| `ctrl+i` | italic | make selected text italic |\n| `ctrl+u` | underline | underline selected text |\n| `ctrl+l` | link | create hyperlink |\n| `ctrl+shift+t` | tag note | add tags to current note |\n\n#### calendar\n| shortcut | action | description |\n|----------|--------|-------------|\n| `ctrl+n` | new event | create new calendar event |\n| `ctrl+e` | edit event | edit selected event |\n| `delete` | delete event | delete selected event |\n| `ctrl+t` | today | go to today's date |\n| `ctrl+g` | go to date | jump to specific date |\n| `ctrl+1` | day view | switch to day view |\n| `ctrl+2` | week view | switch to week view |\n| `ctrl+3` | month view | switch to month view |\n| `left/right` | navigate | navigate between time periods |\n| `f5` | refresh | refresh calendar data |\n\n#### finance tracker\n| shortcut | action | description |\n|----------|--------|-------------|\n| `ctrl+n` | new transaction | add new financial transaction |\n| `ctrl+e` | edit transaction | edit selected transaction |\n| `delete` | delete transaction | delete selected transaction |\n| `ctrl+r` | generate report | generate financial report |\n| `ctrl+b` | budget view | open budget planning view |\n| `ctrl+c` | categories | manage expense categories |\n| `ctrl+f` | filter | filter transactions |\n| `f5` | refresh | refresh financial data |\n\n#### file manager\n| shortcut | action | description |\n|----------|--------|-------------|\n| `ctrl+n` | new folder | create new folder |\n| `f2` | rename | rename selected file/folder |\n| `delete` | delete | delete selected items |\n| `ctrl+c` | copy | copy selected items |\n| `ctrl+x` | cut | cut selected items |\n| `ctrl+v` | paste | paste items |\n| `ctrl+a` | select all | select all items |\n| `backspace` | go up | go to parent directory |\n| `enter` | open | open selected file/folder |\n| `f5` | refresh | refresh directory listing |\n\n#### ai assistant\n| shortcut | action | description |\n|----------|--------|-------------|\n| `ctrl+space` | toggle chat | open/close ai assistant |\n| `enter` | send message | send message to ai |\n| `shift+enter` | new line | add line break in message |\n| `ctrl+l` | clear chat | clear conversation history |\n| `ctrl+1` | normal mode | switch to normal thinking mode |\n| `ctrl+2` | thinking mode | switch to thinking mode |\n| `ctrl+3` | research mode | switch to research mode |\n| `up/down` | message history | navigate through previous messages |\n| `ctrl+s` | save chat | save conversation to file |\n| `escape` | close chat | close ai assistant window |\n\n## voice commands\n\n### activation\n\n| command | action |\n|---------|--------|\n| \"hey westfall\" | activate voice control |\n| \"listen\" | start listening for commands |\n| \"stop listening\" | deactivate voice control |\n\n### navigation commands\n\n| command | action |\n|---------|--------|\n| \"open [feature name]\" | open specific feature |\n| \"go to dashboard\" | navigate to main dashboard |\n| \"show settings\" | open application settings |\n| \"switch to [feature]\" | switch to different feature |\n| \"go back\" | go to previous screen |\n| \"show help\" | open help documentation |\n\n### ai assistant commands\n\n| command | action |\n|---------|--------|\n| \"ask ai [question]\" | send question to ai assistant |\n| \"open ai chat\" | open ai assistant window |\n| \"close ai chat\" | close ai assistant window |\n| \"clear conversation\" | clear ai chat history |\n| \"switch to thinking mode\" | change ai thinking mode |\n| \"switch to research mode\" | change ai thinking mode |\n\n### feature-specific voice commands\n\n#### email\n| command | action |\n|---------|--------|\n| \"check email\" | open email and check for new messages |\n| \"compose email\" | start composing new email |\n| \"reply to email\" | reply to currently selected email |\n| \"delete email\" | delete currently selected email |\n| \"mark as read\" | mark selected email as read |\n| \"sync email\" | synchronize with email server |\n\n#### password manager\n| command | action |\n|---------|--------|\n| \"open passwords\" | open password manager |\n| \"generate password\" | generate new secure password |\n| \"search password for [site]\" | search for password entry |\n| \"lock passwords\" | lock password manager |\n| \"add new password\" | create new password entry |\n\n#### notes\n| command | action |\n|---------|--------|\n| \"create new note\" | create new note |\n| \"save note\" | save current note |\n| \"search notes for [term]\" | search within notes |\n| \"open note [title]\" | open specific note by title |\n\n## command line interface (cli)\n\n### application startup options\n\n```bash\npython main.py [options]\n\noptions:\n  --help, -h              show help message and exit\n  --version, -v           show version information\n  --config file           use specific configuration file\n  --data-dir dir          use specific data directory\n  --log-level level       set logging level (debug, info, warning, error)\n  --no-gui                run in headless mode (cli only)\n  --safe-mode             start in safe mode (minimal features)\n  --repair-db             attempt to repair database corruption\n  --export-data dir       export all data to directory\n  --import-data file      import data from file\n  --reset                 reset application to factory defaults\n  --debug                 enable debug mode\n  --profile               enable performance profiling\n```\n\n### examples\n\n```bash\n# start with custom data directory\npython main.py --data-dir /path/to/data\n\n# start in safe mode\npython main.py --safe-mode\n\n# export all data\npython main.py --export-data /path/to/backup\n\n# debug mode with verbose logging\npython main.py --debug --log-level debug\n\n# repair database issues\npython main.py --repair-db\n```\n\n## ai assistant command syntax\n\n### basic commands\n\n| command pattern | example | description |\n|----------------|---------|-------------|\n| `ai: [question]` | `ai: what's the weather today?` | ask ai a question |\n| `? [question]` | `? how do i add a password?` | quick ai help |\n| `help [topic]` | `help email setup` | get help on specific topic |\n| `explain [concept]` | `explain encryption` | get detailed explanation |\n\n### feature-specific ai commands\n\n| command pattern | example | description |\n|----------------|---------|-------------|\n| `create [item]` | `create new password for gmail` | create new item |\n| `find [query]` | `find notes about project` | search for content |\n| `analyze [data]` | `analyze my spending this month` | analyze data |\n| `suggest [context]` | `suggest email template` | get ai suggestions |\n| `summarize [content]` | `summarize today's news` | create summary |\n\n### advanced ai commands\n\n| command pattern | example | description |\n|----------------|---------|-------------|\n| `thinking: [complex query]` | `thinking: optimize my budget` | use thinking mode |\n| `research: [topic]` | `research: investment strategies` | use research mode |\n| `automate [task]` | `automate daily email check` | create automation |\n| `template [type]` | `template business proposal` | generate template |\n\n## search commands\n\n### global search syntax\n\n| pattern | example | description |\n|---------|---------|-------------|\n| `[term]` | `password` | basic text search |\n| `tag:[name]` | `tag:important` | search by tag |\n| `type:[category]` | `type:email` | search by content type |\n| `date:[range]` | `date:last week` | search by date |\n| `author:[name]` | `author:john` | search by author/creator |\n| `[term1] and [term2]` | `project and deadline` | multiple terms (all) |\n| `[term1] or [term2]` | `email or message` | multiple terms (any) |\n| `not [term]` | `not spam` | exclude terms |\n\n### feature-specific search\n\n#### email search\n| pattern | example | description |\n|---------|---------|-------------|\n| `from:[email]` | `from:boss@company.com` | search by sender |\n| `to:[email]` | `to:client@example.com` | search by recipient |\n| `subject:[text]` | `subject:meeting` | search email subjects |\n| `has:attachment` | `has:attachment` | emails with attachments |\n| `is:unread` | `is:unread` | unread emails only |\n| `is:important` | `is:important` | important emails only |\n\n#### notes search\n| pattern | example | description |\n|---------|---------|-------------|\n| `title:[text]` | `title:project notes` | search note titles |\n| `content:[text]` | `content:meeting notes` | search note content |\n| `category:[name]` | `category:work` | search by category |\n| `modified:[date]` | `modified:today` | recently modified |\n\n## quick actions\n\n### dashboard quick actions\n\n| action | shortcut | voice command |\n|--------|----------|---------------|\n| quick note | `ctrl+shift+n` | \"create quick note\" |\n| quick password | `ctrl+shift+p` | \"generate quick password\" |\n| quick event | `ctrl+shift+e` | \"add quick event\" |\n| quick expense | `ctrl+shift+x` | \"log quick expense\" |\n| quick search | `ctrl+k` | \"search everything\" |\n\n### context menu actions\n\nright-click context menus provide quick access to:\n\n- **text selection**: copy, search, translate, ask ai\n- **files**: import, open with, encrypt, backup\n- **emails**: reply, forward, archive, mark\n- **notes**: link, tag, share, export\n- **passwords**: copy, edit, generate similar\n\n## accessibility commands\n\n### screen reader support\n\n| command | action |\n|---------|--------|\n| `tab` | navigate to next element |\n| `shift+tab` | navigate to previous element |\n| `enter` | activate current element |\n| `space` | toggle checkboxes/buttons |\n| `arrow keys` | navigate within lists/menus |\n| `home/end` | go to first/last item |\n| `page up/down` | scroll content |\n\n### high contrast mode\n\n| command | action |\n|---------|--------|\n| `ctrl+alt+h` | toggle high contrast mode |\n| `ctrl+plus` | increase font size |\n| `ctrl+minus` | decrease font size |\n| `ctrl+0` | reset font size |\n\n## custom commands\n\n### creating custom shortcuts\n\n1. go to settings → keyboard → custom shortcuts\n2. click \"add new shortcut\"\n3. define key combination and action\n4. save and test\n\n### custom voice commands\n\n1. go to settings → voice → custom commands\n2. record voice pattern\n3. define associated action\n4. train recognition model\n\n### macro commands\n\ncreate complex command sequences:\n\n```yaml\n# example macro definition\nname: \"daily startup\"\ntrigger: \"ctrl+alt+s\"\nactions:\n  - open_feature: \"email\"\n  - action: \"sync\"\n  - open_feature: \"calendar\"\n  - action: \"show_today\"\n  - open_feature: \"ai_assistant\"\n  - ai_query: \"what's my schedule today?\"\n```\n\n---\n\n*last updated: september 8, 2025*"
    },
    {
      "path": "_templates/style-guide.md",
      "title": "Documentation Style Guide",
      "description": "Writing standards and guidelines for Westfall Personal Assistant documentation",
      "category": "meta",
      "tags": [
        "style",
        "guide",
        "writing",
        "standards"
      ],
      "priority": 1,
      "word_count": 1103,
      "last_updated": "2025-09-08",
      "search_text": "documentation style guide writing standards and guidelines for westfall personal assistant documentation # documentation style guide\n\nthis guide defines the writing standards and style conventions for all westfall personal assistant documentation.\n\n## writing principles\n\n### 1. clarity first\n- use clear, concise language\n- avoid jargon without explanation\n- write for your audience's skill level\n- use active voice when possible\n\n### 2. user-focused\n- start with what the user wants to accomplish\n- provide context for why something is important\n- include practical examples\n- anticipate user questions\n\n### 3. consistency\n- use consistent terminology throughout\n- follow established patterns and templates\n- maintain uniform formatting\n- use the same style for similar content types\n\n## front matter standards\n\nall documentation files must include front matter with these fields:\n\n```yaml\n---\ntitle: \"page title (50 characters max)\"\ndescription: \"brief description (160 characters max)\"\ncategory: \"user|developer|installation|configuration|reference|meta\"\npriority: 10\ntags: [\"tag1\", \"tag2\", \"tag3\"]\nlast_updated: \"yyyy-mm-dd\"\n---\n```\n\n### field descriptions\n\n- **title**: the page title, used in navigation and search\n- **description**: brief summary for search results and previews\n- **category**: primary content category for organization\n- **priority**: display order within category (1-99, lower = higher priority)\n- **tags**: keywords for search and categorization\n- **last_updated**: last modification date in iso format\n\n## content structure\n\n### page organization\n\n1. **title (h1)** - one per page, matches front matter title\n2. **introduction** - brief overview of the content\n3. **main sections (h2)** - logical content divisions\n4. **subsections (h3-h6)** - hierarchical content organization\n5. **related links** - cross-references to other documentation\n\n### section guidelines\n\n#### overview sections\n- explain what the reader will learn\n- list prerequisites if any\n- provide context for the information\n\n#### step-by-step instructions\n1. use numbered lists for sequential steps\n2. start each step with an action verb\n3. include expected results\n4. provide screenshots for ui actions\n\n#### code examples\n- use syntax highlighting for code blocks\n- include complete, runnable examples\n- explain what the code does\n- show expected output\n\n## language and tone\n\n### voice\n- **professional but friendly** - approachable expert\n- **direct and helpful** - clear instructions without fluff\n- **encouraging** - build user confidence\n\n### grammar rules\n- use present tense for current functionality\n- use future tense only for upcoming features\n- use second person (\"you\") for instructions\n- use first person plural (\"we\") for recommendations\n\n### terminology\n\n#### consistent terms\n- **westfall personal assistant** - full application name (first use)\n- **wpa** - acceptable abbreviation after first use\n- **application** - not \"app\" in formal documentation\n- **feature** - not \"function\" or \"tool\" for ui elements\n- **settings** - not \"preferences\" or \"options\"\n\n#### avoiding jargon\n- define technical terms on first use\n- link to glossary when appropriate\n- use common language alternatives when possible\n\n## formatting standards\n\n### headers\n- use title case for h1 and h2\n- use sentence case for h3 and below\n- don't use punctuation in headers\n- keep headers descriptive and scannable\n\n### lists\n- use parallel structure in list items\n- start each item with same part of speech\n- use sentence case for list items\n- end list items with periods only if they're complete sentences\n\n### links\n- use descriptive link text (not \"click here\")\n- link to the most specific relevant page\n- use relative links for internal documentation\n- test all links before publishing\n\n### code and commands\n\n#### inline code\nuse backticks for:\n- file names: `config.yaml`\n- commands: `python main.py`\n- code elements: `class mainwindow`\n- keyboard shortcuts: `ctrl+c`\n\n#### code blocks\n```python\n# use language-specific syntax highlighting\ndef example_function():\n    \"\"\"include docstrings and comments.\"\"\"\n    return \"complete examples preferred\"\n```\n\n#### command line examples\n```bash\n# show the command prompt when helpful\n$ python main.py --help\n\n# include expected output\nwestfall personal assistant\nusage: python main.py [options]\n```\n\n### tables\n- use tables for structured data comparison\n- include header row\n- keep cell content concise\n- ensure table is readable on mobile\n\n| column 1 | column 2 | column 3 |\n|----------|----------|----------|\n| data     | data     | data     |\n\n### images and media\n\n#### screenshots\n- use consistent browser/os for screenshots\n- highlight relevant ui elements\n- include alt text for accessibility\n- keep file sizes reasonable (<500kb)\n\n#### diagrams\n- use consistent style and colors\n- include alt text descriptions\n- provide svg format when possible\n- label all elements clearly\n\n## content types\n\n### user guides\n- start with the user's goal\n- provide step-by-step instructions\n- include troubleshooting for common issues\n- end with next steps or related topics\n\n### api documentation\n- include complete endpoint information\n- provide request/response examples\n- document all parameters and fields\n- include error codes and messages\n\n### tutorials\n- break complex tasks into steps\n- build complexity gradually\n- include checkpoints to verify progress\n- provide complete working examples\n\n### reference material\n- organize alphabetically or logically\n- use consistent formatting\n- include cross-references\n- keep entries concise but complete\n\n## quality checklist\n\nbefore publishing documentation:\n\n### content review\n- [ ] information is accurate and current\n- [ ] examples work as written\n- [ ] links are functional\n- [ ] content matches the target audience\n- [ ] follows established templates\n\n### writing review\n- [ ] clear and concise language\n- [ ] consistent terminology\n- [ ] proper grammar and spelling\n- [ ] appropriate tone and voice\n- [ ] scannable structure with headers\n\n### technical review\n- [ ] code examples are tested\n- [ ] commands produce expected results\n- [ ] screenshots are current\n- [ ] front matter is complete\n- [ ] tags are appropriate\n\n### accessibility review\n- [ ] alt text for all images\n- [ ] proper heading hierarchy\n- [ ] sufficient color contrast\n- [ ] descriptive link text\n- [ ] table headers identified\n\n## maintenance\n\n### regular updates\n- review and update content quarterly\n- verify links and examples still work\n- update screenshots when ui changes\n- refresh \"last_updated\" dates\n\n### version control\n- use clear commit messages\n- document major changes in changelog\n- tag releases for documentation versions\n- maintain backward compatibility when possible\n\n## tools and resources\n\n### writing tools\n- **markdown**: standard format for all documentation\n- **vale**: automated style checking\n- **grammarly**: grammar and clarity checking\n- **hemingway**: readability analysis\n\n### development tools\n- **sphinx**: documentation generation\n- **mkdocs**: alternative documentation platform\n- **plantuml**: diagram creation\n- **screenshot tools**: platform-specific tools\n\n### references\n- [microsoft writing style guide](https://docs.microsoft.com/en-us/style-guide/)\n- [google developer documentation style guide](https://developers.google.com/style)\n- [plain language guidelines](https://www.plainlanguage.gov/guidelines/)\n\n---\n\n*last updated: september 8, 2025*"
    },
    {
      "path": "user/getting-started.md",
      "title": "Getting Started with Westfall Personal Assistant",
      "description": "Complete beginner's guide to installing, setting up, and using Westfall Personal Assistant",
      "category": "user",
      "tags": [
        "getting-started",
        "beginner",
        "setup",
        "installation"
      ],
      "priority": 1,
      "word_count": 1735,
      "last_updated": "2025-09-08",
      "search_text": "getting started with westfall personal assistant complete beginner's guide to installing, setting up, and using westfall personal assistant # getting started with westfall personal assistant\n\nwelcome to **westfall personal assistant** - your secure, ai-powered productivity companion! this guide will help you get started quickly and make the most of your new personal assistant.\n\n## what is westfall personal assistant?\n\nwestfall personal assistant is a comprehensive desktop application that combines multiple productivity tools with ai assistance, all while keeping your data secure and private on your local machine.\n\n### key features at a glance\n\n- 🔐 **military-grade encryption** for all your sensitive data\n- 🤖 **ai assistant** with context awareness and multiple thinking modes\n- 📧 **email management** with imap/smtp support\n- 🔑 **password manager** with secure generation and storage\n- 📝 **rich text notes** with categories and search\n- 📅 **calendar and scheduling** with reminders\n- 💰 **finance tracking** for income and expenses\n- 🌤️ **weather forecasts** and current conditions\n- 📰 **news aggregation** from multiple sources\n- and much more!\n\n## quick start (5 minutes)\n\n### 1. installation\n\nchoose your installation method:\n\n#### option a: zero-dependency installation (recommended)\n1. download the installer for your platform from [github releases](https://github.com/westfall-softwares/westfallpersonalassistant/releases)\n2. run the installer and follow the prompts\n3. launch the application\n\n#### option b: from source\n```bash\n# clone the repository\ngit clone https://github.com/westfall-softwares/westfallpersonalassistant.git\ncd westfallpersonalassistant\n\n# install dependencies\npip install -r requirements.txt\n\n# run the application\npython main.py\n```\n\nfor detailed installation instructions, see our [installation guides](../installation/).\n\n### 2. first launch setup\n\nwhen you first open westfall personal assistant, you'll be guided through initial setup:\n\n#### create your master password\n1. the application will prompt you to create a **master password**\n2. choose a strong, memorable password\n3. **important**: write this down somewhere safe - it encrypts all your data!\n4. confirm your password\n\n#### welcome tour\n- take the optional welcome tour to familiarize yourself with the interface\n- learn about the main navigation and key features\n- get tips for using the ai assistant effectively\n\n### 3. explore the interface\n\n#### main navigation\nthe left sidebar contains all major features:\n\n- **dashboard** - overview of your day and quick actions\n- **ai assistant** - your intelligent helper (ctrl+space)\n- **email** - manage your email accounts (ctrl+e)\n- **password manager** - secure password storage (ctrl+p)\n- **notes** - rich text notes with categories (ctrl+n)\n- **calendar** - events and scheduling\n- **finance** - track income and expenses\n- **weather** - current conditions and forecasts\n- **news** - rss feeds and news aggregation\n- **todo** - task management (ctrl+t)\n- **contacts** - contact information management\n- **file manager** - navigate your file system\n- **music player** - audio playbook and playlists\n- **recipes** - recipe storage and search\n- **browser** - integrated web browsing\n- **settings** - application configuration\n\n#### top bar features\n- **search bar** (ctrl+k) - quick feature search and ai queries\n- **ai chat toggle** (ctrl+space) - open/close ai assistant\n- **help** (f1) - access this documentation\n- **settings** - application preferences\n\n## essential first steps\n\n### 1. configure api keys (optional)\n\nfor enhanced functionality, configure these optional api keys in settings:\n\n#### weather service\n1. go to settings → api keys\n2. get a free api key from [openweathermap](https://openweathermap.org/api)\n3. enter your api key in the weather section\n4. save settings\n\n#### news service\n1. get a free api key from [newsapi](https://newsapi.org/)\n2. enter it in settings → api keys → news\n3. configure your preferred news sources\n\n#### ai features (advanced)\n1. for enhanced ai capabilities, get an openai api key\n2. enter it in settings → ai → openai api key\n3. choose your preferred model (gpt-3.5 or gpt-4)\n\n### 2. set up email (optional)\n\nto use the integrated email client:\n\n1. open **email** from the sidebar\n2. click \"add account\"\n3. enter your email credentials:\n   - email address\n   - password\n   - imap/smtp settings (often auto-detected)\n4. test the connection\n5. choose sync preferences\n\n### 3. add your first password\n\ntry the password manager:\n\n1. open **password manager** (ctrl+p)\n2. click \"add new password\"\n3. fill in the details:\n   - website/service name\n   - username\n   - use the built-in generator for a secure password\n4. save the entry\n\n### 4. create your first note\n\nget familiar with the notes feature:\n\n1. open **notes** (ctrl+n)\n2. click \"new note\"\n3. try the rich text formatting options\n4. add a category for organization\n5. save your note\n\n## using the ai assistant\n\nthe ai assistant is one of the most powerful features of westfall personal assistant.\n\n### quick access\n- **keyboard**: press ctrl+space anywhere in the application\n- **search bar**: type `ai:` or `?` followed by your question\n- **sidebar**: click the ai assistant button\n\n### ai thinking modes\n\nthe ai has three different thinking modes:\n\n#### normal mode\n- quick responses for simple questions\n- general assistance and information\n- basic task help\n\n#### thinking mode\n- deeper analysis and reasoning\n- complex problem solving\n- detailed explanations\n\n#### research mode\n- comprehensive information gathering\n- multi-step analysis\n- detailed research reports\n\n### example ai commands\n\ntry these examples to get started:\n\n```\nai: help me write an email to my boss about taking vacation\nai: create a strong password for my bank account\nai: what's on my calendar today?\nai: help me organize my finances\nai: summarize today's news\n```\n\n### context awareness\n\nthe ai knows which feature you're currently using and can provide relevant help:\n\n- in **email**: get help writing, organizing, or managing messages\n- in **finance**: analyze spending patterns or budget planning\n- in **notes**: writing assistance, formatting, or organization\n- in **calendar**: schedule optimization and planning\n\n## customizing your experience\n\n### themes and appearance\n1. go to settings → appearance\n2. choose between light, dark, or auto themes\n3. adjust font sizes for comfortable reading\n4. customize the color scheme\n\n### keyboard shortcuts\nlearn these essential shortcuts:\n\n| shortcut | function |\n|----------|----------|\n| `ctrl+k` | quick search/command bar |\n| `ctrl+space` | toggle ai assistant |\n| `f1` | show help documentation |\n| `f11` | toggle fullscreen |\n| `ctrl+,` | open settings |\n| `ctrl+q` | quit application |\n\n### privacy and security settings\n1. go to settings → security\n2. configure auto-lock timeout (default: 15 minutes)\n3. set up backup encryption preferences\n4. review data storage locations\n\n## organizing your data\n\n### notes organization\n- use **categories** to group related notes\n- add **tags** for cross-cutting themes\n- use the **search function** to find content quickly\n- try **linking** related notes together\n\n### password organization\n- create **folders** for different types of accounts\n- use **tags** to mark important or frequently used passwords\n- set up **favorites** for quick access\n- use **secure notes** for additional account information\n\n### calendar management\n- create **multiple calendars** for different life areas\n- use **color coding** for visual organization\n- set up **recurring events** for routine activities\n- configure **reminders** for important events\n\n## getting help\n\n### built-in help\n- press **f1** for context-sensitive help\n- use the **ai assistant** for immediate questions\n- check **tooltips** by hovering over ui elements\n- look for **\"learn more\"** links in features\n\n### documentation\n- [feature guides](./features/) - detailed guides for each feature\n- [troubleshooting](./troubleshooting.md) - solutions for common issues\n- [faq](./faq.md) - frequently asked questions\n- [keyboard shortcuts](../reference/commands.md) - complete shortcut reference\n\n### community support\n- [github issues](https://github.com/westfall-softwares/westfallpersonalassistant/issues) - report bugs or request features\n- [discussions](https://github.com/westfall-softwares/westfallpersonalassistant/discussions) - ask questions and share tips\n\n## next steps\n\nnow that you're set up, explore these areas:\n\n### immediate next steps\n1. **import existing data** - move passwords, notes, or contacts from other applications\n2. **connect email accounts** - centralize your email management\n3. **set up calendar sync** - import from google calendar, outlook, etc.\n4. **explore ai features** - try different types of ai assistance\n\n### advanced features to explore later\n- **business intelligence** - advanced analytics and reporting\n- **crm integration** - customer relationship management\n- **screen intelligence** - ai-powered screen analysis\n- **template exchange** - create and share document templates\n- **plugin marketplace** - extend functionality with plugins\n\n### customization ideas\n- **create custom templates** for frequently used documents\n- **set up automation rules** for email and task management\n- **configure advanced ai prompts** for specific use cases\n- **build custom dashboards** for your workflow\n\n## tips for success\n\n### security best practices\n- **backup regularly** - export your data periodically\n- **use unique passwords** - let the password manager generate them\n- **enable auto-lock** - protect your data when away\n- **keep software updated** - install updates promptly\n\n### productivity tips\n- **learn keyboard shortcuts** - speed up common actions\n- **use the ai assistant** - don't hesitate to ask for help\n- **organize from the start** - create good habits early\n- **explore gradually** - master one feature before moving to the next\n\n### getting the most from ai\n- **be specific** in your requests\n- **provide context** when asking questions\n- **try different thinking modes** for different types of tasks\n- **ask follow-up questions** to dig deeper\n\n## troubleshooting common issues\n\n### application won't start\n1. check system requirements (python 3.8+)\n2. verify all dependencies are installed\n3. try running from command line to see error messages\n4. check [installation guide](../installation/) for platform-specific issues\n\n### forgot master password\nunfortunately, there's no way to recover a forgotten master password - this is by design for security. you'll need to:\n1. reset the application data (losing encrypted information)\n2. set up the application again\n3. this is why we recommend writing down your master password securely\n\n### features not working\n1. check internet connection for online features\n2. verify api keys are correctly configured\n3. look at the application logs for error messages\n4. try restarting the application\n\nfor more detailed troubleshooting, see our [troubleshooting guide](./troubleshooting.md).\n\n## welcome to your new assistant!\n\ncongratulations! you're now ready to make the most of westfall personal assistant. remember:\n\n- **start small** - master the basics before exploring advanced features\n- **ask for help** - the ai assistant is there to help you learn\n- **customize gradually** - adapt the application to your workflow over time\n- **stay secure** - take advantage of the built-in security features\n\nthe application is designed to grow with you, so don't feel overwhelmed by all the features. focus on what's most important to your daily workflow, and gradually explore new capabilities as you become more comfortable.\n\n---\n\n*last updated: september 8, 2025*"
    },
    {
      "path": "index.md",
      "title": "Westfall Personal Assistant Documentation",
      "description": "Complete documentation for the Westfall Personal Assistant - a secure, AI-powered personal productivity suite",
      "category": "index",
      "tags": [
        "documentation",
        "home",
        "index"
      ],
      "priority": 1,
      "word_count": 362,
      "last_updated": "2025-09-08",
      "search_text": "westfall personal assistant documentation complete documentation for the westfall personal assistant - a secure, ai-powered personal productivity suite # westfall personal assistant documentation\n\nwelcome to the comprehensive documentation for **westfall personal assistant** - a secure, ai-powered personal assistant application with comprehensive productivity tools.\n\n## quick start\n\n- **new users**: start with the [getting started guide](user/getting-started.md)\n- **developers**: check out the [architecture overview](developer/architecture.md)\n- **installation**: see our [installation guides](installation/)\n- **troubleshooting**: visit our [troubleshooting guide](user/troubleshooting.md)\n\n## documentation sections\n\n### 📚 user documentation\n- [getting started](user/getting-started.md) - your first steps with westfall personal assistant\n- [feature guides](user/features/) - detailed guides for all features\n- [troubleshooting](user/troubleshooting.md) - common issues and solutions\n- [faq](user/faq.md) - frequently asked questions\n\n### 🔧 developer documentation\n- [architecture overview](developer/architecture.md) - system design and components\n- [api reference](developer/api/) - complete api documentation\n- [contributing](developer/contributing.md) - how to contribute to the project\n- [plugin development](developer/plugins/) - creating extensions\n\n### 🚀 installation & configuration\n- [installation guides](installation/) - platform-specific installation\n- [configuration guides](configuration/) - settings and customization\n\n### 📖 reference\n- [command reference](reference/commands.md) - all available commands\n- [configuration reference](reference/config-files.md) - configuration options\n- [data formats](reference/data-formats.md) - file formats and schemas\n\n## features overview\n\nwestfall personal assistant includes:\n\n- 🔐 **secure storage**: military-grade encryption for passwords and sensitive data\n- 🤖 **ai assistant**: integrated ai chat with context awareness\n- 📧 **email client**: full imap/smtp email management\n- 🔑 **password manager**: encrypted password storage with generator\n- 📝 **notes**: rich text notes with categories\n- 📅 **calendar**: event scheduling and reminders\n- 🌤️ **weather**: real-time weather and forecasts\n- 📰 **news reader**: rss and newsapi integration\n- 🎵 **music player**: audio playback with playlists\n- 💰 **finance tracker**: income/expense management\n- ✅ **todo list**: task management\n- 🍳 **recipe manager**: recipe storage and search\n- 📁 **file manager**: file system navigation\n- 🌐 **web browser**: integrated web browsing\n- 👥 **contacts**: contact management system\n\n## getting help\n\n- **in-app help**: press `f1` or use the help button in the application\n- **ai assistant**: ask questions directly to the built-in ai (ctrl+space)\n- **community support**: visit our [github issues](https://github.com/westfall-softwares/westfallpersonalassistant/issues)\n- **documentation feedback**: help us improve this documentation by reporting issues\n\n## search documentation\n\nuse the search functionality (ctrl+f) to quickly find information across all documentation pages.\n\n---\n\n*last updated: september 8, 2025*"
    },
    {
      "path": "installation/windows.md",
      "title": "Windows Installation Guide",
      "description": "Complete installation guide for Westfall Personal Assistant on Windows",
      "category": "installation",
      "tags": [
        "windows",
        "installation",
        "setup",
        "guide"
      ],
      "priority": 1,
      "word_count": 1413,
      "last_updated": "2025-09-08",
      "search_text": "windows installation guide complete installation guide for westfall personal assistant on windows # windows installation guide\n\nthis guide will help you install westfall personal assistant on windows 10 or windows 11.\n\n## system requirements\n\n### minimum requirements\n- **operating system**: windows 10 (version 1903) or windows 11\n- **processor**: 64-bit intel or amd processor\n- **memory**: 4 gb ram\n- **storage**: 2 gb available disk space\n- **graphics**: directx 11 compatible\n- **network**: internet connection for initial setup\n\n### recommended requirements\n- **operating system**: windows 11 (latest version)\n- **processor**: intel core i5 or amd ryzen 5 (or equivalent)\n- **memory**: 8 gb ram or more\n- **storage**: 5 gb available disk space (ssd preferred)\n- **graphics**: dedicated graphics card (for ai processing)\n- **network**: broadband internet connection\n\n## installation methods\n\nchoose the installation method that works best for you:\n\n### method 1: installer package (recommended)\n\n#### step 1: download the installer\n\n1. visit the [github releases page](https://github.com/westfall-softwares/westfallpersonalassistant/releases)\n2. find the latest release\n3. download `westfallpersonalassistant-windows-setup.exe`\n\n#### step 2: run the installer\n\n1. **locate the downloaded file** in your downloads folder\n2. **right-click** on `westfallpersonalassistant-windows-setup.exe`\n3. **select \"run as administrator\"** (important for proper installation)\n4. **click \"yes\"** when prompted by user account control\n\n#### step 3: follow installation wizard\n\n1. **welcome screen**: click \"next\"\n2. **license agreement**: read and accept the license terms\n3. **installation directory**: choose installation location (default recommended)\n4. **start menu folder**: choose start menu folder name\n5. **additional tasks**: select desired options:\n   - ✅ create desktop shortcut\n   - ✅ add to path environment variable\n   - ✅ associate file types\n6. **ready to install**: review settings and click \"install\"\n7. **completing setup**: click \"finish\" to complete installation\n\n#### step 4: first launch\n\n1. **launch** from desktop shortcut or start menu\n2. **allow firewall access** if prompted\n3. **complete initial setup** (see first time setup section)\n\n### method 2: portable installation\n\nfor users who prefer a portable installation without admin rights:\n\n#### step 1: download portable package\n\n1. visit the [github releases page](https://github.com/westfall-softwares/westfallpersonalassistant/releases)\n2. download `westfallpersonalassistant-windows-portable.zip`\n\n#### step 2: extract and run\n\n1. **extract** the zip file to your desired location\n2. **navigate** to the extracted folder\n3. **run** `westfallpersonalassistant.exe`\n\n### method 3: from source code\n\nfor developers or advanced users:\n\n#### prerequisites\n\n1. **install python 3.8+**\n   - download from [python.org](https://www.python.org/downloads/)\n   - ✅ check \"add python to path\" during installation\n\n2. **install git**\n   - download from [git-scm.com](https://git-scm.com/download/win)\n\n#### installation steps\n\n1. **open command prompt** or powershell as administrator\n\n2. **clone the repository**:\n   ```cmd\n   git clone https://github.com/westfall-softwares/westfallpersonalassistant.git\n   cd westfallpersonalassistant\n   ```\n\n3. **create virtual environment**:\n   ```cmd\n   python -m venv venv\n   venv\\scripts\\activate\n   ```\n\n4. **install dependencies**:\n   ```cmd\n   pip install -r requirements.txt\n   ```\n\n5. **run the application**:\n   ```cmd\n   python main.py\n   ```\n\n## first time setup\n\n### initial configuration\n\nwhen you first launch westfall personal assistant:\n\n#### step 1: create master password\n\n1. **enter a strong master password** (this encrypts all your data)\n2. **confirm the password**\n3. **write it down** in a secure location\n4. **click \"create\"**\n\n⚠️ **important**: if you forget your master password, there's no way to recover your encrypted data!\n\n#### step 2: basic settings\n\n1. **choose your preferred theme** (light/dark/auto)\n2. **select language** (if multiple languages are available)\n3. **configure data directory** (default location recommended)\n4. **set up automatic backups** (highly recommended)\n\n#### step 3: optional features\n\nconfigure these optional features for enhanced functionality:\n\n**weather service**:\n1. get a free api key from [openweathermap](https://openweathermap.org/api)\n2. go to settings → api keys → weather\n3. enter your api key\n\n**news service**:\n1. get a free api key from [newsapi](https://newsapi.org/)\n2. go to settings → api keys → news\n3. enter your api key\n\n**ai features**:\n1. get an api key from [openai](https://platform.openai.com/) (optional)\n2. go to settings → ai → openai api key\n3. enter your api key for enhanced ai capabilities\n\n## troubleshooting common issues\n\n### installation problems\n\n#### issue: \"windows protected your pc\" message\n\n**cause**: windows defender smartscreen blocking unsigned executable\n\n**solution**:\n1. click \"more info\"\n2. click \"run anyway\"\n3. or add installer to windows defender exceptions\n\n#### issue: installation fails with permission errors\n\n**solution**:\n1. right-click installer\n2. select \"run as administrator\"\n3. ensure you have admin rights on the computer\n\n#### issue: python not found error (source installation)\n\n**solution**:\n1. install python from [python.org](https://www.python.org/downloads/)\n2. ✅ check \"add python to path\" during installation\n3. restart command prompt\n4. verify with: `python --version`\n\n### application launch issues\n\n#### issue: application won't start\n\n**solutions**:\n\n1. **check system requirements**\n2. **run as administrator**\n3. **update windows** to latest version\n4. **install visual c++ redistributables**:\n   - download from [microsoft](https://docs.microsoft.com/en-us/cpp/windows/latest-supported-vc-redist)\n   - install both x86 and x64 versions\n\n#### issue: \"dll not found\" errors\n\n**solutions**:\n1. **install microsoft visual c++ redistributable 2019-2022**\n2. **update windows** to latest version\n3. **check windows update** for optional updates\n\n#### issue: high dpi display issues\n\n**solutions**:\n1. right-click application shortcut\n2. select \"properties\"\n3. go to \"compatibility\" tab\n4. click \"change high dpi settings\"\n5. check \"override high dpi scaling behavior\"\n6. select \"system (enhanced)\" from dropdown\n\n### performance issues\n\n#### issue: slow startup\n\n**solutions**:\n1. **disable startup programs** not needed\n2. **run disk cleanup** to free space\n3. **update graphics drivers**\n4. **consider ssd** if using traditional hard drive\n\n#### issue: high memory usage\n\n**solutions**:\n1. **close unnecessary applications**\n2. **increase virtual memory** (pagefile)\n3. **upgrade ram** if possible\n4. **check task manager** for memory-intensive processes\n\n## advanced configuration\n\n### windows firewall configuration\n\nif you experience network connectivity issues:\n\n1. **open windows defender firewall**\n2. **click \"allow an app through firewall\"**\n3. **click \"change settings\"**\n4. **click \"allow another app...\"**\n5. **browse** to westfallpersonalassistant.exe\n6. **check both private and public** networks\n7. **click ok**\n\n### environment variables\n\nfor advanced users, you can configure these environment variables:\n\n```cmd\n# data directory location\nset westfall_data_dir=c:\\users\\yourname\\documents\\westfalldata\n\n# log level (debug, info, warning, error)\nset westfall_log_level=info\n\n# disable hardware acceleration\nset westfall_no_hardware_accel=1\n```\n\n### registry settings\n\nadvanced configuration via windows registry (use with caution):\n\n```\n[hkey_current_user\\software\\westfallsoftwares\\personalassistant]\n\"datadirectory\"=\"c:\\\\users\\\\yourname\\\\documents\\\\westfalldata\"\n\"autostart\"=dword:00000001\n\"minimizetotray\"=dword:00000001\n```\n\n## automatic updates\n\n### configure update settings\n\n1. **go to settings → updates**\n2. **choose update frequency**:\n   - automatic (recommended)\n   - check daily\n   - check weekly\n   - manual only\n3. **select update channel**:\n   - stable (recommended)\n   - beta (for testing new features)\n\n### manual update process\n\n1. **download latest installer** from github releases\n2. **close** westfall personal assistant\n3. **run new installer** (will update existing installation)\n4. **restart** the application\n\n## uninstallation\n\n### using windows settings\n\n1. **open settings** (windows key + i)\n2. **go to apps**\n3. **find \"westfall personal assistant\"**\n4. **click and select \"uninstall\"**\n5. **follow prompts** to complete removal\n\n### manual removal\n\nif automatic uninstall doesn't work:\n\n1. **delete application folder** (default: `c:\\program files\\westfallpersonalassistant\\`)\n2. **delete data folder** (default: `%appdata%\\westfallpersonalassistant\\`)\n3. **remove start menu shortcuts**\n4. **clean registry entries** (optional, use registry cleaner)\n\n### preserving data\n\nto keep your data for future reinstallation:\n\n1. **before uninstalling**, export your data:\n   - settings → data → export all data\n   - save to secure location\n2. **back up data directory** manually:\n   - copy `%appdata%\\westfallpersonalassistant\\` to safe location\n\n## security considerations\n\n### windows defender configuration\n\n1. **add data folder to exclusions** (optional, for performance):\n   - windows security → virus & threat protection\n   - manage settings under virus & threat protection settings\n   - add exclusion → folder\n   - select: `%appdata%\\westfallpersonalassistant\\`\n\n### user account control (uac)\n\n- **keep uac enabled** for security\n- **run as standard user** (not administrator) for daily use\n- **only elevate when necessary** for installation/updates\n\n### backup recommendations\n\n1. **use windows file history** to back up data folder\n2. **set up onedrive** sync for automatic cloud backup\n3. **create regular exports** of important data\n4. **test restore process** periodically\n\n## integration with windows\n\n### file associations\n\nthe installer can associate these file types with westfall personal assistant:\n\n- `.wfa` - westfall assistant files\n- `.wfn` - westfall notes\n- `.wft` - westfall templates\n\n### context menu integration\n\nright-click context menu additions:\n\n- **\"open with westfall assistant\"** for supported files\n- **\"import to westfall\"** for various data files\n- **\"create westfall note\"** in folders\n\n### system tray integration\n\n- **minimize to system tray** option\n- **quick access menu** from tray icon\n- **notification integration** with windows action center\n\n## getting help\n\n### built-in help\n\n- **press f1** for context-sensitive help\n- **use ai assistant** for questions (ctrl+space)\n- **check settings → help & support**\n\n### online resources\n\n- **documentation**: [full documentation](../index.md)\n- **community**: [github discussions](https://github.com/westfall-softwares/westfallpersonalassistant/discussions)\n- **issues**: [github issues](https://github.com/westfall-softwares/westfallpersonalassistant/issues)\n\n### log files location\n\nif you need to check log files for troubleshooting:\n\n```\n%appdata%\\westfallpersonalassistant\\logs\\\n```\n\n---\n\n*last updated: september 8, 2025*"
    },
    {
      "path": "user/features/ai-assistant.md",
      "title": "AI Assistant Feature Guide",
      "description": "Complete guide to using the AI Assistant in Westfall Personal Assistant",
      "category": "user",
      "tags": [
        "ai",
        "assistant",
        "chat",
        "help"
      ],
      "priority": 2,
      "word_count": 1130,
      "last_updated": "2025-09-08",
      "search_text": "ai assistant feature guide complete guide to using the ai assistant in westfall personal assistant # ai assistant feature guide\n\nthe ai assistant is the intelligent heart of westfall personal assistant, providing context-aware help, automation, and advanced capabilities across all features.\n\n## what is the ai assistant?\n\nthe ai assistant is an integrated conversational ai that:\n- understands the context of what you're doing\n- provides help with any feature or task\n- can automate complex workflows\n- learns from your preferences and usage patterns\n- operates with multiple thinking modes for different types of tasks\n\n## getting started\n\n### accessing the ai assistant\n\n#### quick access methods\n- **keyboard shortcut**: press `ctrl+space` anywhere in the application\n- **search bar**: type `ai:` or `?` followed by your question in the top search bar\n- **sidebar button**: click the \"ai assistant\" button in the left sidebar\n- **feature integration**: available within each feature for context-specific help\n\n#### ai chat window\nwhen opened, the ai assistant appears as a chat interface where you can:\n- type questions or commands\n- view conversation history\n- switch between thinking modes\n- access quick action buttons\n\n### first interaction\n\ntry your first ai interaction:\n\n1. press `ctrl+space` to open the ai assistant\n2. type: `hello! what can you help me with?`\n3. press enter to send\n4. the ai will introduce itself and explain its capabilities\n\n## ai thinking modes\n\nthe ai assistant operates in three distinct modes, each optimized for different types of tasks:\n\n### normal mode (default)\n**best for**: quick questions, simple tasks, immediate help\n\n**characteristics**:\n- fast responses (1-3 seconds)\n- concise, direct answers\n- good for factual information\n- ideal for basic assistance\n\n**example interactions**:\n```\nuser: what's today's weather?\nai: currently 72°f and sunny. high of 78°f expected today.\n\nuser: how do i add a new password?\nai: click password manager → add new → fill in details → save\n```\n\n### thinking mode\n**best for**: complex problems, analysis, detailed explanations\n\n**characteristics**:\n- deeper reasoning (5-10 seconds)\n- shows thought process\n- more comprehensive responses\n- better for complex scenarios\n\n**example interactions**:\n```\nuser: help me organize my monthly budget\nai: [thinking through your financial situation...]\nlet me analyze your current expenses and suggest a budget structure:\n\n1. first, i'll review your recent transactions...\n2. then categorize your expenses...\n3. finally, create a balanced budget plan...\n\n[detailed budget breakdown follows]\n```\n\n### research mode\n**best for**: comprehensive analysis, learning, detailed investigation\n\n**characteristics**:\n- extensive analysis (10-30 seconds)\n- multi-step research process\n- comprehensive, detailed responses\n- includes sources and references\n\n**example interactions**:\n```\nuser: research the best investment strategies for someone in their 30s\nai: [conducting comprehensive research...]\n\ni'll research investment strategies for people in their 30s by analyzing:\n1. risk tolerance considerations for this age group\n2. time horizon advantages\n3. common financial goals\n4. diversification strategies\n5. tax-advantaged accounts\n\n[detailed research report follows with sources]\n```\n\n### switching between modes\n\nto change thinking modes:\n1. click the mode selector in the ai chat window\n2. or type commands like:\n   - `switch to thinking mode`\n   - `use research mode for this`\n   - `quick mode please`\n\n## context-aware assistance\n\nthe ai assistant knows what feature you're currently using and provides relevant help:\n\n### email context\nwhen you're in the email feature:\n\n```\nuser: help me write a professional email\nai: i can see you're composing an email. what type of professional email are you writing?\n- business proposal\n- meeting request  \n- follow-up message\n- complaint or concern\n- thank you note\n\nor describe the situation and i'll draft it for you.\n```\n\n### password manager context\nwhen you're in the password manager:\n\n```\nuser: i need a secure password\nai: i'll generate a secure password for you. what type of account is this for?\n- banking/financial (extra secure)\n- social media\n- shopping/e-commerce\n- work/professional\n- personal/entertainment\n\nwould you like me to create one now and help you save it?\n```\n\n### notes context\nwhen you're in the notes feature:\n\n```\nuser: help me organize this information\nai: i can see you have a note open. would you like me to:\n- restructure the content with headers and bullet points\n- create an outline from the text\n- suggest categories or tags\n- format it as a specific document type\n- extract action items or key points\n```\n\n## common ai commands\n\n### quick actions\n- `ai: what can you do?` - overview of capabilities\n- `ai: help with [feature name]` - feature-specific assistance\n- `ai: show keyboard shortcuts` - display shortcuts for current feature\n- `ai: what's new today?` - daily summary and updates\n\n### task automation\n- `ai: organize my notes by category` - automatic organization\n- `ai: create a weekly schedule from my tasks` - smart scheduling\n- `ai: analyze my spending patterns` - financial analysis\n- `ai: draft a response to this email` - email composition\n\n### learning and information\n- `ai: explain how [feature] works` - feature tutorials\n- `ai: what are best practices for [task]?` - expert advice\n- `ai: research [topic]` - comprehensive research\n- `ai: summarize [content]` - content summarization\n\n### productivity enhancement\n- `ai: suggest improvements to my workflow` - optimization advice\n- `ai: find patterns in my data` - data analysis\n- `ai: remind me about [task] in [time]` - smart reminders\n- `ai: create a template for [document type]` - template generation\n\n## tips for effective ai interaction\n\n### writing good prompts\n\n#### be specific\n❌ **vague**: \"help with email\"\n✅ **specific**: \"help me write a professional follow-up email to a client who hasn't responded to my proposal from last week\"\n\n#### provide context\n❌ **no context**: \"create a budget\"\n✅ **with context**: \"create a monthly budget for a family of four with $5,000 income, focusing on saving for a house down payment\"\n\n#### use examples\n❌ **abstract**: \"make this sound better\"\n✅ **with example**: \"make this email sound more professional, similar to how a consultant would write to a ceo\"\n\n### getting better results\n\n#### break down complex requests\ninstead of: \"plan my entire week\"\ntry:\n1. \"what are my priorities this week?\"\n2. \"when are the best times for focused work?\"\n3. \"how should i organize my meetings?\"\n\n#### iterate and refine\n- start with a basic request\n- ask follow-up questions\n- refine based on ai suggestions\n- build on previous responses\n\n#### use the right mode\n- **quick questions** → normal mode\n- **complex analysis** → thinking mode  \n- **learning/research** → research mode\n\n## related features\n\n- [voice control guide](./voice-control.md) - control the ai with your voice\n- [productivity features](./productivity.md) - task and time management\n- [email assistant](./email-management.md) - ai-powered email features\n\n## see also\n\n- [getting started guide](../getting-started.md) - basic setup and introduction\n- [troubleshooting guide](../troubleshooting.md) - common ai issues and solutions\n\n---\n\n*last updated: september 8, 2025*"
    },
    {
      "path": "reference/config-files.md",
      "title": "Configuration Reference",
      "description": "Complete reference for configuration files and settings",
      "category": "reference",
      "tags": [
        "configuration",
        "settings",
        "reference",
        "files"
      ],
      "priority": 2,
      "word_count": 880,
      "last_updated": "2025-09-08",
      "search_text": "configuration reference complete reference for configuration files and settings # configuration reference\n\nthis document provides a comprehensive reference for all configuration options and files in westfall personal assistant.\n\n## configuration files\n\n### main configuration file\n\n**location**: `config/settings.json`\n\n```json\n{\n  \"application\": {\n    \"theme\": \"auto\",\n    \"language\": \"en\",\n    \"auto_start\": false,\n    \"minimize_to_tray\": true,\n    \"auto_lock_timeout\": 900,\n    \"check_updates\": true\n  },\n  \"security\": {\n    \"encryption_algorithm\": \"aes-256-gcm\",\n    \"key_derivation\": \"pbkdf2\",\n    \"iterations\": 100000,\n    \"auto_backup\": true,\n    \"backup_interval\": 86400\n  },\n  \"features\": {\n    \"ai_assistant\": {\n      \"enabled\": true,\n      \"default_mode\": \"normal\",\n      \"context_memory\": true,\n      \"local_processing\": false\n    },\n    \"email\": {\n      \"enabled\": true,\n      \"sync_interval\": 300,\n      \"offline_days\": 30\n    },\n    \"password_manager\": {\n      \"enabled\": true,\n      \"generator_length\": 16,\n      \"include_symbols\": true\n    }\n  }\n}\n```\n\n### database configuration\n\n**location**: `config/database.json`\n\n```json\n{\n  \"engine\": \"sqlite\",\n  \"path\": \"data/westfall.db\",\n  \"backup_path\": \"backups/\",\n  \"encryption\": true,\n  \"vacuum_interval\": 604800,\n  \"connection_pool\": {\n    \"size\": 5,\n    \"timeout\": 30\n  }\n}\n```\n\n## environment variables\n\n### core settings\n\n| variable | description | default |\n|----------|-------------|---------|\n| `westfall_data_dir` | data directory path | `~/.westfall` |\n| `westfall_config_dir` | configuration directory | `~/.westfall/config` |\n| `westfall_log_level` | logging level | `info` |\n| `westfall_log_file` | log file path | `logs/westfall.log` |\n\n### security settings\n\n| variable | description | default |\n|----------|-------------|---------|\n| `westfall_encryption_key` | override encryption key | (none) |\n| `westfall_secure_mode` | enhanced security mode | `false` |\n| `westfall_keyring_service` | os keyring service name | `westfall` |\n\n### feature toggles\n\n| variable | description | default |\n|----------|-------------|---------|\n| `westfall_enable_ai` | enable ai features | `true` |\n| `westfall_enable_email` | enable email client | `true` |\n| `westfall_enable_passwords` | enable password manager | `true` |\n| `westfall_enable_plugins` | enable plugin system | `true` |\n\n## application settings\n\n### theme configuration\n\n```json\n{\n  \"theme\": {\n    \"mode\": \"auto\",\n    \"primary_color\": \"#3498db\",\n    \"secondary_color\": \"#2c3e50\",\n    \"accent_color\": \"#e74c3c\",\n    \"font_family\": \"segoe ui\",\n    \"font_size\": 10,\n    \"custom_css\": \"\"\n  }\n}\n```\n\n### ui layout settings\n\n```json\n{\n  \"ui\": {\n    \"window\": {\n      \"width\": 1200,\n      \"height\": 800,\n      \"remember_size\": true,\n      \"remember_position\": true\n    },\n    \"sidebar\": {\n      \"width\": 250,\n      \"collapsed\": false,\n      \"auto_hide\": false\n    },\n    \"toolbar\": {\n      \"visible\": true,\n      \"position\": \"top\",\n      \"icon_size\": 24\n    }\n  }\n}\n```\n\n### keyboard shortcuts\n\n```json\n{\n  \"shortcuts\": {\n    \"global\": {\n      \"show_hide\": \"ctrl+alt+w\",\n      \"quick_search\": \"ctrl+k\",\n      \"ai_assistant\": \"ctrl+space\"\n    },\n    \"features\": {\n      \"email\": \"ctrl+e\",\n      \"passwords\": \"ctrl+p\",\n      \"notes\": \"ctrl+n\"\n    }\n  }\n}\n```\n\n## security configuration\n\n### encryption settings\n\n```json\n{\n  \"encryption\": {\n    \"algorithm\": \"aes-256-gcm\",\n    \"key_derivation\": {\n      \"method\": \"pbkdf2\",\n      \"iterations\": 100000,\n      \"salt_length\": 32\n    },\n    \"secure_delete\": true,\n    \"memory_protection\": true\n  }\n}\n```\n\n### authentication settings\n\n```json\n{\n  \"authentication\": {\n    \"session_timeout\": 3600,\n    \"max_failed_attempts\": 5,\n    \"lockout_duration\": 300,\n    \"require_2fa\": false,\n    \"biometric_auth\": false\n  }\n}\n```\n\n## feature-specific configuration\n\n### ai assistant configuration\n\n```json\n{\n  \"ai_assistant\": {\n    \"providers\": {\n      \"openai\": {\n        \"api_key\": \"\",\n        \"model\": \"gpt-3.5-turbo\",\n        \"max_tokens\": 2048,\n        \"temperature\": 0.7\n      },\n      \"local\": {\n        \"model_path\": \"models/\",\n        \"gpu_acceleration\": true,\n        \"max_memory\": \"4gb\"\n      }\n    },\n    \"behavior\": {\n      \"context_window\": 50,\n      \"memory_enabled\": true,\n      \"learning_enabled\": false,\n      \"response_style\": \"helpful\"\n    }\n  }\n}\n```\n\n### email configuration\n\n```json\n{\n  \"email\": {\n    \"accounts\": [\n      {\n        \"name\": \"primary\",\n        \"email\": \"user@example.com\",\n        \"imap\": {\n          \"server\": \"imap.example.com\",\n          \"port\": 993,\n          \"encryption\": \"ssl\"\n        },\n        \"smtp\": {\n          \"server\": \"smtp.example.com\",\n          \"port\": 587,\n          \"encryption\": \"tls\"\n        }\n      }\n    ],\n    \"sync\": {\n      \"interval\": 300,\n      \"offline_days\": 30,\n      \"download_attachments\": false\n    }\n  }\n}\n```\n\n### password manager configuration\n\n```json\n{\n  \"password_manager\": {\n    \"generator\": {\n      \"default_length\": 16,\n      \"include_uppercase\": true,\n      \"include_lowercase\": true,\n      \"include_numbers\": true,\n      \"include_symbols\": true,\n      \"exclude_ambiguous\": true\n    },\n    \"security\": {\n      \"clipboard_timeout\": 30,\n      \"auto_lock\": true,\n      \"require_master_password\": true\n    }\n  }\n}\n```\n\n## performance configuration\n\n### memory settings\n\n```json\n{\n  \"performance\": {\n    \"memory\": {\n      \"cache_size\": \"256mb\",\n      \"preload_features\": false,\n      \"gc_interval\": 60\n    },\n    \"database\": {\n      \"connection_pool\": 5,\n      \"query_cache\": true,\n      \"vacuum_threshold\": 0.3\n    }\n  }\n}\n```\n\n### network settings\n\n```json\n{\n  \"network\": {\n    \"timeout\": 30,\n    \"retries\": 3,\n    \"proxy\": {\n      \"enabled\": false,\n      \"url\": \"\",\n      \"auth\": false\n    },\n    \"ssl\": {\n      \"verify\": true,\n      \"ca_bundle\": \"\"\n    }\n  }\n}\n```\n\n## logging configuration\n\n### log levels\n\n| level | description | use case |\n|-------|-------------|----------|\n| `debug` | detailed diagnostic info | development |\n| `info` | general information | normal operation |\n| `warning` | warning messages | potential issues |\n| `error` | error messages | error conditions |\n| `critical` | critical errors | system failures |\n\n### log format\n\n```json\n{\n  \"logging\": {\n    \"level\": \"info\",\n    \"format\": \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\",\n    \"file\": \"logs/westfall.log\",\n    \"max_size\": \"10mb\",\n    \"backup_count\": 5,\n    \"console\": false\n  }\n}\n```\n\n## plugin configuration\n\n### plugin settings\n\n```json\n{\n  \"plugins\": {\n    \"enabled\": true,\n    \"auto_update\": false,\n    \"sandbox\": true,\n    \"paths\": [\n      \"plugins/\",\n      \"~/.westfall/plugins/\"\n    ],\n    \"marketplace\": {\n      \"url\": \"https://plugins.westfall.com\",\n      \"auto_check\": true\n    }\n  }\n}\n```\n\n### plugin manifest example\n\n```json\n{\n  \"name\": \"example plugin\",\n  \"version\": \"1.0.0\",\n  \"description\": \"example plugin for demonstration\",\n  \"author\": \"plugin author\",\n  \"main\": \"main.py\",\n  \"permissions\": [\n    \"read_notes\",\n    \"network_access\"\n  ],\n  \"dependencies\": [\n    \"requests>=2.25.0\"\n  ]\n}\n```\n\n## backup configuration\n\n### backup settings\n\n```json\n{\n  \"backup\": {\n    \"enabled\": true,\n    \"interval\": 86400,\n    \"retention\": 30,\n    \"location\": \"backups/\",\n    \"compression\": true,\n    \"encryption\": true,\n    \"exclude\": [\n      \"logs/\",\n      \"cache/\",\n      \"temp/\"\n    ]\n  }\n}\n```\n\n## migration configuration\n\n### version migration\n\n```json\n{\n  \"migration\": {\n    \"auto_migrate\": true,\n    \"backup_before\": true,\n    \"migration_path\": \"migrations/\",\n    \"rollback_enabled\": true\n  }\n}\n```\n\n## troubleshooting configuration issues\n\n### common issues\n\n1. **configuration file not found**\n   - check file permissions\n   - verify file path\n   - restore from backup\n\n2. **invalid json format**\n   - validate json syntax\n   - check for trailing commas\n   - use json validator\n\n3. **permission errors**\n   - check file ownership\n   - verify write permissions\n   - run as appropriate user\n\n### configuration validation\n\n```bash\n# validate configuration\npython -m westfall.config validate\n\n# show current configuration\npython -m westfall.config show\n\n# reset to defaults\npython -m westfall.config reset\n```\n\n---\n\n*last updated: september 8, 2025*"
    },
    {
      "path": "developer/contributing.md",
      "title": "Contributing to Westfall Personal Assistant",
      "description": "Guidelines for contributing code, documentation, and improvements to the project",
      "category": "developer",
      "tags": [
        "contributing",
        "development",
        "guidelines",
        "community"
      ],
      "priority": 3,
      "word_count": 2019,
      "last_updated": "2025-09-08",
      "search_text": "contributing to westfall personal assistant guidelines for contributing code, documentation, and improvements to the project # contributing to westfall personal assistant\n\nwe welcome contributions from the community! this guide explains how to contribute effectively to the westfall personal assistant project.\n\n## table of contents\n\n- [getting started](#getting-started)\n- [code contributions](#code-contributions)\n- [documentation contributions](#documentation-contributions)\n- [bug reports](#bug-reports)\n- [feature requests](#feature-requests)\n- [development setup](#development-setup)\n- [coding standards](#coding-standards)\n- [testing guidelines](#testing-guidelines)\n- [pull request process](#pull-request-process)\n- [community guidelines](#community-guidelines)\n\n## getting started\n\n### ways to contribute\n\n1. **code contributions** - bug fixes, new features, performance improvements\n2. **documentation** - improve guides, fix typos, add examples\n3. **testing** - write tests, report bugs, test new features\n4. **design** - ui/ux improvements, icons, themes\n5. **translation** - internationalization and localization\n6. **community support** - help other users, answer questions\n\n### before you start\n\n1. **check existing issues** - look for similar work already in progress\n2. **read the documentation** - understand the project architecture\n3. **set up development environment** - follow the setup guide\n4. **join the community** - introduce yourself in discussions\n\n## code contributions\n\n### types of code contributions\n\n#### bug fixes\n- security vulnerabilities (highest priority)\n- data loss or corruption issues\n- application crashes\n- performance problems\n- ui/ux issues\n\n#### new features\n- core functionality enhancements\n- new productivity tools\n- ai improvements\n- integration with external services\n- plugin system extensions\n\n#### code quality improvements\n- refactoring for better maintainability\n- performance optimizations\n- test coverage improvements\n- documentation in code\n- accessibility enhancements\n\n### development workflow\n\n1. **fork the repository** on github\n2. **create a feature branch** from `main`\n3. **make your changes** following coding standards\n4. **write/update tests** for your changes\n5. **update documentation** as needed\n6. **test thoroughly** on multiple platforms\n7. **submit a pull request** with clear description\n\n### branch naming conventions\n\nuse descriptive branch names:\n\n```bash\n# bug fixes\nfix/password-manager-crash\nfix/email-sync-timeout\n\n# new features  \nfeature/voice-control\nfeature/calendar-integration\n\n# documentation\ndocs/installation-guide\ndocs/api-reference\n\n# refactoring\nrefactor/storage-layer\nrefactor/ui-components\n```\n\n## documentation contributions\n\n### documentation types\n\n1. **user documentation**\n   - getting started guides\n   - feature tutorials\n   - troubleshooting guides\n   - faq updates\n\n2. **developer documentation**\n   - api documentation\n   - architecture guides\n   - plugin development\n   - code comments\n\n3. **process documentation**\n   - contributing guidelines\n   - release procedures\n   - testing protocols\n\n### documentation standards\n\n- follow the [documentation style guide](../_templates/style-guide.md)\n- use clear, concise language\n- include practical examples\n- test all code examples\n- keep screenshots current\n- use proper front matter\n\n### documentation workflow\n\n1. **identify gaps** - what's missing or unclear?\n2. **use templates** - start with appropriate template\n3. **write draft** - focus on clarity and completeness\n4. **get feedback** - share with others for review\n5. **update and refine** - incorporate feedback\n6. **submit pull request** - include validation results\n\n## bug reports\n\n### before reporting\n\n1. **search existing issues** - check if already reported\n2. **try latest version** - bug might be already fixed\n3. **reproduce consistently** - ensure bug is reproducible\n4. **check logs** - gather relevant error information\n\n### bug report template\n\n```markdown\n**description**\na clear description of the bug.\n\n**steps to reproduce**\n1. go to '...'\n2. click on '....'\n3. scroll down to '....'\n4. see error\n\n**expected behavior**\nwhat you expected to happen.\n\n**actual behavior**\nwhat actually happened.\n\n**screenshots**\nif applicable, add screenshots.\n\n**environment**\n- os: [e.g. windows 11, macos 12.1, ubuntu 22.04]\n- application version: [e.g. 1.2.3]\n- python version: [e.g. 3.10.2]\n\n**additional context**\nany other context about the problem.\n\n**logs**\n```\n[paste relevant log entries]\n```\n```\n\n### security issues\n\n**do not report security vulnerabilities in public issues!**\n\nfor security issues:\n1. email security@westfall-softwares.com\n2. include \"security\" in the subject line\n3. provide detailed reproduction steps\n4. we'll respond within 48 hours\n\n## feature requests\n\n### before requesting\n\n1. **check existing requests** - avoid duplicates\n2. **consider scope** - is it appropriate for this project?\n3. **think about implementation** - how might it work?\n4. **consider alternatives** - could existing features be enhanced?\n\n### feature request template\n\n```markdown\n**is your feature request related to a problem?**\na clear description of what the problem is.\n\n**describe the solution you'd like**\na clear description of what you want to happen.\n\n**describe alternatives you've considered**\nother solutions or features you've considered.\n\n**use cases**\nhow would this feature be used? who would benefit?\n\n**implementation ideas**\nany thoughts on how this might be implemented.\n\n**additional context**\nany other context, screenshots, or examples.\n```\n\n## development setup\n\n### prerequisites\n\n- python 3.8 or higher\n- git\n- code editor (vs code recommended)\n- virtual environment tool (venv, conda, etc.)\n\n### setup steps\n\n1. **fork and clone the repository**\n   ```bash\n   git clone https://github.com/yourusername/westfallpersonalassistant.git\n   cd westfallpersonalassistant\n   ```\n\n2. **create virtual environment**\n   ```bash\n   python -m venv venv\n   source venv/bin/activate  # on windows: venv\\scripts\\activate\n   ```\n\n3. **install dependencies**\n   ```bash\n   pip install -r requirements.txt\n   pip install -r requirements-dev.txt  # development dependencies\n   ```\n\n4. **set up pre-commit hooks**\n   ```bash\n   pre-commit install\n   ```\n\n5. **run tests to verify setup**\n   ```bash\n   python -m pytest tests/\n   ```\n\n6. **start the application**\n   ```bash\n   python main.py\n   ```\n\n### development tools\n\n#### recommended vs code extensions\n\n```json\n{\n  \"recommendations\": [\n    \"ms-python.python\",\n    \"ms-python.black-formatter\",\n    \"ms-python.flake8\",\n    \"ms-python.mypy-type-checker\",\n    \"yzhang.markdown-all-in-one\",\n    \"streetsidesoftware.code-spell-checker\"\n  ]\n}\n```\n\n#### pre-commit configuration\n\n```yaml\n# .pre-commit-config.yaml\nrepos:\n  - repo: https://github.com/psf/black\n    rev: 23.1.0\n    hooks:\n      - id: black\n  - repo: https://github.com/pycqa/flake8\n    rev: 6.0.0\n    hooks:\n      - id: flake8\n  - repo: https://github.com/pre-commit/mirrors-mypy\n    rev: v1.0.1\n    hooks:\n      - id: mypy\n```\n\n## coding standards\n\n### python style guide\n\nwe follow [pep 8](https://www.python.org/dev/peps/pep-0008/) with these specific requirements:\n\n#### code formatting\n- **line length**: 88 characters (black formatter default)\n- **indentation**: 4 spaces (no tabs)\n- **quotes**: double quotes for strings\n- **imports**: organized with isort\n\n#### naming conventions\n```python\n# classes: pascalcase\nclass passwordmanager:\n    pass\n\n# functions and variables: snake_case\ndef encrypt_password(password_data):\n    user_input = get_user_input()\n\n# constants: upper_snake_case\nmax_password_length = 256\n\n# private methods: leading underscore\ndef _internal_method(self):\n    pass\n```\n\n#### documentation\n```python\ndef encrypt_data(data: bytes, key: str) -> bytes:\n    \"\"\"encrypt data using aes-256-gcm.\n    \n    args:\n        data: the data to encrypt\n        key: the encryption key\n        \n    returns:\n        encrypted data with authentication tag\n        \n    raises:\n        encryptionerror: if encryption fails\n    \"\"\"\n    pass\n```\n\n### type hints\n\nuse type hints for all public functions:\n\n```python\nfrom typing import optional, list, dict, union\n\ndef process_user_data(\n    user_id: str,\n    data: dict[str, union[str, int]],\n    options: optional[list[str]] = none\n) -> bool:\n    \"\"\"process user data with optional configuration.\"\"\"\n    pass\n```\n\n### error handling\n\n```python\n# use specific exception types\nclass passwordmanagererror(exception):\n    \"\"\"base exception for password manager operations.\"\"\"\n    pass\n\nclass encryptionerror(passwordmanagererror):\n    \"\"\"raised when encryption operations fail.\"\"\"\n    pass\n\n# handle exceptions appropriately\ntry:\n    result = encrypt_data(sensitive_data)\nexcept encryptionerror as e:\n    logger.error(f\"encryption failed: {e}\")\n    raise\nexcept exception as e:\n    logger.error(f\"unexpected error: {e}\")\n    raise passwordmanagererror(f\"operation failed: {e}\")\n```\n\n### logging\n\n```python\nimport logging\n\nlogger = logging.getlogger(__name__)\n\ndef process_request(request_data):\n    logger.info(\"processing request\")\n    try:\n        result = perform_operation(request_data)\n        logger.debug(f\"operation completed: {result}\")\n        return result\n    except exception as e:\n        logger.error(f\"request processing failed: {e}\", exc_info=true)\n        raise\n```\n\n## testing guidelines\n\n### testing philosophy\n\n- **test-driven development** encouraged\n- **high test coverage** (aim for 90%+)\n- **fast, reliable tests** that can run locally\n- **test different scenarios** including edge cases\n\n### test structure\n\n```\ntests/\n├── unit/                 # fast, isolated tests\n│   ├── test_security.py\n│   ├── test_storage.py\n│   └── features/\n├── integration/          # component interaction tests\n│   ├── test_feature_integration.py\n│   └── test_ai_system.py\n├── e2e/                 # end-to-end user workflows\n│   └── test_user_workflows.py\n├── fixtures/            # test data and helpers\n└── conftest.py          # pytest configuration\n```\n\n### test examples\n\n#### unit test\n```python\nimport pytest\nfrom unittest.mock import mock, patch\nfrom src.security.encryption import encryptionmanager\n\nclass testencryptionmanager:\n    def setup_method(self):\n        self.encryption_manager = encryptionmanager()\n    \n    def test_encrypt_decrypt_roundtrip(self):\n        \"\"\"test data can be encrypted and decrypted successfully.\"\"\"\n        original_data = b\"sensitive information\"\n        key = \"test-key-123\"\n        \n        encrypted = self.encryption_manager.encrypt(original_data, key)\n        decrypted = self.encryption_manager.decrypt(encrypted, key)\n        \n        assert decrypted == original_data\n    \n    def test_encrypt_with_invalid_key_raises_error(self):\n        \"\"\"test encryption with invalid key raises appropriate error.\"\"\"\n        with pytest.raises(encryptionerror):\n            self.encryption_manager.encrypt(b\"data\", \"\")\n```\n\n#### integration test\n```python\nimport pytest\nfrom src.features.password_manager import passwordmanager\nfrom src.security.encryption import encryptionmanager\n\nclass testpasswordmanagerintegration:\n    @pytest.fixture\n    def password_manager(self):\n        encryption = encryptionmanager()\n        return passwordmanager(encryption)\n    \n    def test_store_and_retrieve_password(self, password_manager):\n        \"\"\"test password storage and retrieval workflow.\"\"\"\n        password_data = {\n            \"site\": \"example.com\",\n            \"username\": \"user@example.com\",\n            \"password\": \"secure123!\"\n        }\n        \n        # store password\n        password_id = password_manager.store_password(password_data)\n        assert password_id is not none\n        \n        # retrieve password\n        retrieved = password_manager.get_password(password_id)\n        assert retrieved[\"site\"] == password_data[\"site\"]\n        assert retrieved[\"username\"] == password_data[\"username\"]\n        assert retrieved[\"password\"] == password_data[\"password\"]\n```\n\n### running tests\n\n```bash\n# run all tests\npython -m pytest\n\n# run with coverage\npython -m pytest --cov=src\n\n# run specific test file\npython -m pytest tests/unit/test_security.py\n\n# run tests matching pattern\npython -m pytest -k \"test_encryption\"\n\n# run in parallel (with pytest-xdist)\npython -m pytest -n auto\n```\n\n## pull request process\n\n### before submitting\n\n1. **update your branch** with latest main\n   ```bash\n   git checkout main\n   git pull upstream main\n   git checkout your-feature-branch\n   git rebase main\n   ```\n\n2. **run full test suite**\n   ```bash\n   python -m pytest\n   python -m flake8 src/\n   python -m mypy src/\n   ```\n\n3. **update documentation** if needed\n\n4. **test on multiple platforms** if possible\n\n### pull request template\n\n```markdown\n## description\nbrief description of changes and motivation.\n\n## type of change\n- [ ] bug fix (non-breaking change that fixes an issue)\n- [ ] new feature (non-breaking change that adds functionality)\n- [ ] breaking change (fix or feature that would cause existing functionality to not work as expected)\n- [ ] documentation update\n\n## testing\n- [ ] i have added tests that prove my fix is effective or that my feature works\n- [ ] new and existing unit tests pass locally with my changes\n- [ ] i have tested on multiple platforms (if applicable)\n\n## checklist\n- [ ] my code follows the style guidelines\n- [ ] i have performed a self-review of my own code\n- [ ] i have commented my code, particularly in hard-to-understand areas\n- [ ] i have made corresponding changes to the documentation\n- [ ] my changes generate no new warnings\n- [ ] any dependent changes have been merged and published\n\n## screenshots (if applicable)\nadd screenshots to help explain your changes.\n\n## additional notes\nany additional information or context.\n```\n\n### review process\n\n1. **automated checks** must pass (ci/cd)\n2. **code review** by at least one maintainer\n3. **testing** on different platforms if needed\n4. **documentation review** for user-facing changes\n5. **security review** for security-related changes\n\n### addressing review feedback\n\n- **be responsive** to review comments\n- **ask questions** if feedback is unclear\n- **make requested changes** promptly\n- **test thoroughly** after changes\n- **update pr description** if scope changes\n\n## community guidelines\n\n### code of conduct\n\nwe are committed to providing a welcoming and inclusive environment:\n\n- **be respectful** and considerate\n- **be collaborative** and help others\n- **be patient** with newcomers\n- **give constructive feedback**\n- **focus on what's best** for the community\n\n### communication channels\n\n- **github issues** - bug reports and feature requests\n- **github discussions** - questions and general discussion\n- **pull requests** - code review and collaboration\n- **email** - security issues and private matters\n\n### getting help\n\n- **read the documentation** first\n- **search existing issues** and discussions\n- **ask specific questions** with context\n- **provide minimal reproducible examples**\n- **be patient** while waiting for responses\n\n### recognition\n\ncontributors are recognized in:\n- release notes for their contributions\n- contributors file in the repository\n- annual contributor highlights\n- special recognition for significant contributions\n\n## release process\n\n### version numbering\n\nwe use [semantic versioning](https://semver.org/):\n- **major.minor.patch** (e.g., 1.2.3)\n- **major**: breaking changes\n- **minor**: new features, backward compatible\n- **patch**: bug fixes, backward compatible\n\n### release schedule\n\n- **patch releases**: as needed for critical bugs\n- **minor releases**: monthly for new features\n- **major releases**: every 6-12 months\n\n### contributing to releases\n\n- **test release candidates** and report issues\n- **update documentation** for new features\n- **help with release notes** and changelog\n- **assist with platform-specific testing**\n\n## getting started checklist\n\n- [ ] read this contributing guide completely\n- [ ] set up development environment\n- [ ] join github discussions\n- [ ] look for \"good first issue\" labels\n- [ ] introduce yourself to the community\n- [ ] make your first contribution!\n\n---\n\nthank you for contributing to westfall personal assistant! your contributions help make this project better for everyone.\n\n*last updated: september 8, 2025*"
    },
    {
      "path": "reference/data-formats.md",
      "title": "Data Formats Reference",
      "description": "Reference for data formats, schemas, and file structures used by Westfall Personal Assistant",
      "category": "reference",
      "tags": [
        "data",
        "formats",
        "schemas",
        "import",
        "export"
      ],
      "priority": 3,
      "word_count": 1287,
      "last_updated": "2025-09-08",
      "search_text": "data formats reference reference for data formats, schemas, and file structures used by westfall personal assistant # data formats reference\n\nthis document describes all data formats, schemas, and file structures used by westfall personal assistant for import, export, and storage.\n\n## export formats\n\n### complete data export\n\n**format**: json  \n**extension**: `.wfa`  \n**encryption**: yes (with master password)\n\n```json\n{\n  \"metadata\": {\n    \"version\": \"1.0.0\",\n    \"exported_at\": \"2025-09-08t10:30:00z\",\n    \"application_version\": \"1.2.3\",\n    \"data_version\": 2,\n    \"encrypted\": true\n  },\n  \"features\": {\n    \"passwords\": { /* encrypted password data */ },\n    \"notes\": { /* encrypted notes data */ },\n    \"email\": { /* email configuration */ },\n    \"calendar\": { /* calendar events */ },\n    \"finance\": { /* financial data */ }\n  },\n  \"settings\": { /* application settings */ },\n  \"plugins\": { /* plugin data */ }\n}\n```\n\n### selective export\n\n**format**: json  \n**extension**: `.json`  \n**encryption**: optional\n\n```json\n{\n  \"metadata\": {\n    \"feature\": \"passwords\",\n    \"exported_at\": \"2025-09-08t10:30:00z\",\n    \"count\": 150\n  },\n  \"data\": [\n    {\n      \"id\": \"uuid-1234\",\n      \"site\": \"example.com\",\n      \"username\": \"user@example.com\",\n      \"password\": \"encrypted_password\",\n      \"notes\": \"login for work account\",\n      \"created_at\": \"2025-01-15t09:00:00z\",\n      \"updated_at\": \"2025-08-20t14:30:00z\",\n      \"tags\": [\"work\", \"important\"]\n    }\n  ]\n}\n```\n\n## import formats\n\n### password manager import\n\n#### lastpass csv format\n```csv\nurl,username,password,extra,name,grouping,fav\nhttps://example.com,user@example.com,password123,notes here,example site,work,0\n```\n\n#### 1password 1pif format\n```json\n{\n  \"uuid\": \"12345\",\n  \"updatedat\": 1609459200,\n  \"securitylevel\": \"sl5\",\n  \"contentshash\": \"hash\",\n  \"title\": \"example site\",\n  \"location\": \"https://example.com\",\n  \"securecontents\": {\n    \"fields\": [\n      {\n        \"designation\": \"username\",\n        \"name\": \"username\",\n        \"type\": \"t\",\n        \"value\": \"user@example.com\"\n      }\n    ]\n  }\n}\n```\n\n#### bitwarden json format\n```json\n{\n  \"folders\": [],\n  \"items\": [\n    {\n      \"id\": \"uuid\",\n      \"organizationid\": null,\n      \"folderid\": null,\n      \"type\": 1,\n      \"name\": \"example site\",\n      \"notes\": \"notes here\",\n      \"favorite\": false,\n      \"login\": {\n        \"username\": \"user@example.com\",\n        \"password\": \"password123\",\n        \"totp\": null,\n        \"uris\": [\n          {\n            \"match\": null,\n            \"uri\": \"https://example.com\"\n          }\n        ]\n      }\n    }\n  ]\n}\n```\n\n### notes import\n\n#### markdown format\n```markdown\n---\ntitle: \"note title\"\ntags: [\"tag1\", \"tag2\"]\ncategory: \"work\"\ncreated: \"2025-09-08t10:00:00z\"\n---\n\n# note content\n\nthis is the note content in **markdown** format.\n\n- list item 1\n- list item 2\n\n[link to somewhere](https://example.com)\n```\n\n#### evernote enex format\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!doctype en-export system \"http://xml.evernote.com/pub/evernote-export3.dtd\">\n<en-export export-date=\"20250908t100000z\" application=\"evernote\">\n  <note>\n    <title>note title</title>\n    <content><![cdata[<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?>\n<!doctype en-note system \"http://xml.evernote.com/pub/enml2.dtd\">\n<en-note>note content here</en-note>]]></content>\n    <created>20250908t100000z</created>\n    <updated>20250908t100000z</updated>\n    <tag>work</tag>\n    <tag>important</tag>\n  </note>\n</en-export>\n```\n\n### contact import\n\n#### vcard format (.vcf)\n```\nbegin:vcard\nversion:3.0\nfn:john doe\nn:doe;john;;;\norg:example company\ntitle:software engineer\nemail;type=work:john.doe@example.com\ntel;type=work:+1-555-555-5555\nadr;type=work:;;123 main st;anytown;st;12345;usa\nurl:https://johndoe.example.com\nnote:important contact for project collaboration\nend:vcard\n```\n\n#### csv format\n```csv\nname,email,phone,company,title,notes\njohn doe,john.doe@example.com,555-555-5555,example company,software engineer,important contact\n```\n\n### calendar import\n\n#### icalendar format (.ics)\n```ical\nbegin:vcalendar\nversion:2.0\nprodid:-//westfall personal assistant//en\nbegin:vevent\nuid:20250908t100000z-12345@westfall.com\ndtstamp:20250908t100000z\ndtstart:20250915t140000z\ndtend:20250915t150000z\nsummary:team meeting\ndescription:weekly team sync meeting\nlocation:conference room a\nstatus:confirmed\ncategories:work,meeting\nbegin:valarm\ntrigger:-pt15m\naction:display\ndescription:reminder: team meeting in 15 minutes\nend:valarm\nend:vevent\nend:vcalendar\n```\n\n### financial data import\n\n#### csv format\n```csv\ndate,description,amount,category,account,type\n2025-09-08,coffee shop,-4.50,food & dining,checking,expense\n2025-09-08,salary deposit,3000.00,income,checking,income\n2025-09-07,gas station,-45.00,transportation,credit card,expense\n```\n\n#### ofx/qif format\n```\n!type:bank\nd09/08/2025\nt-4.50\npcoffee shop\nlfood & dining\n^\nd09/08/2025\nt3000.00\npsalary deposit\nlincome\n^\n```\n\n## database schema\n\n### core tables\n\n#### users table\n```sql\ncreate table users (\n    id integer primary key autoincrement,\n    username text unique not null,\n    password_hash text not null,\n    salt text not null,\n    created_at timestamp default current_timestamp,\n    last_login timestamp,\n    settings text -- json blob\n);\n```\n\n#### features table\n```sql\ncreate table features (\n    id integer primary key autoincrement,\n    user_id integer references users(id),\n    feature_name text not null,\n    enabled boolean default true,\n    config text, -- json blob\n    created_at timestamp default current_timestamp,\n    updated_at timestamp default current_timestamp\n);\n```\n\n### password manager schema\n\n#### passwords table\n```sql\ncreate table passwords (\n    id text primary key, -- uuid\n    user_id integer references users(id),\n    site_name text not null,\n    site_url text,\n    username text,\n    password_encrypted blob,\n    notes_encrypted blob,\n    folder text,\n    tags text, -- json array\n    favorite boolean default false,\n    created_at timestamp default current_timestamp,\n    updated_at timestamp default current_timestamp,\n    last_used timestamp,\n    index idx_passwords_user_id (user_id),\n    index idx_passwords_site_name (site_name)\n);\n```\n\n### notes schema\n\n#### notes table\n```sql\ncreate table notes (\n    id text primary key, -- uuid\n    user_id integer references users(id),\n    title text not null,\n    content_encrypted blob,\n    category text,\n    tags text, -- json array\n    format text default 'markdown', -- markdown, html, text\n    created_at timestamp default current_timestamp,\n    updated_at timestamp default current_timestamp,\n    accessed_at timestamp,\n    index idx_notes_user_id (user_id),\n    index idx_notes_category (category),\n    index idx_notes_title (title)\n);\n```\n\n### calendar schema\n\n#### events table\n```sql\ncreate table calendar_events (\n    id text primary key, -- uuid\n    user_id integer references users(id),\n    title text not null,\n    description text,\n    location text,\n    start_time timestamp not null,\n    end_time timestamp,\n    all_day boolean default false,\n    recurrence_rule text, -- rrule format\n    reminder_minutes integer default 15,\n    category text,\n    status text default 'confirmed', -- confirmed, tentative, cancelled\n    created_at timestamp default current_timestamp,\n    updated_at timestamp default current_timestamp,\n    index idx_events_user_id (user_id),\n    index idx_events_start_time (start_time)\n);\n```\n\n### finance schema\n\n#### accounts table\n```sql\ncreate table finance_accounts (\n    id text primary key, -- uuid\n    user_id integer references users(id),\n    name text not null,\n    type text not null, -- checking, savings, credit, investment\n    balance decimal(15,2) default 0.00,\n    currency text default 'usd',\n    active boolean default true,\n    created_at timestamp default current_timestamp,\n    updated_at timestamp default current_timestamp\n);\n```\n\n#### transactions table\n```sql\ncreate table finance_transactions (\n    id text primary key, -- uuid\n    user_id integer references users(id),\n    account_id text references finance_accounts(id),\n    amount decimal(15,2) not null,\n    description text not null,\n    category text,\n    subcategory text,\n    transaction_date date not null,\n    type text not null, -- income, expense, transfer\n    tags text, -- json array\n    receipt_path text,\n    created_at timestamp default current_timestamp,\n    updated_at timestamp default current_timestamp,\n    index idx_transactions_user_id (user_id),\n    index idx_transactions_account_id (account_id),\n    index idx_transactions_date (transaction_date),\n    index idx_transactions_category (category)\n);\n```\n\n## plugin data formats\n\n### plugin manifest\n```json\n{\n  \"manifest_version\": 2,\n  \"name\": \"plugin name\",\n  \"version\": \"1.0.0\",\n  \"description\": \"plugin description\",\n  \"author\": \"author name\",\n  \"homepage_url\": \"https://example.com\",\n  \"permissions\": [\n    \"read_notes\",\n    \"write_notes\",\n    \"network_access\"\n  ],\n  \"content_scripts\": [\n    {\n      \"matches\": [\"<all_urls>\"],\n      \"js\": [\"content.js\"]\n    }\n  ],\n  \"background\": {\n    \"scripts\": [\"background.js\"],\n    \"persistent\": false\n  },\n  \"options_page\": \"options.html\",\n  \"icons\": {\n    \"16\": \"icon16.png\",\n    \"48\": \"icon48.png\",\n    \"128\": \"icon128.png\"\n  }\n}\n```\n\n### plugin data storage\n```json\n{\n  \"plugin_id\": \"example-plugin\",\n  \"version\": \"1.0.0\",\n  \"data\": {\n    \"settings\": {\n      \"api_key\": \"encrypted_value\",\n      \"enabled\": true\n    },\n    \"cache\": {\n      \"last_sync\": \"2025-09-08t10:00:00z\",\n      \"data\": {}\n    },\n    \"user_data\": {}\n  },\n  \"permissions\": [\"read_notes\", \"network_access\"],\n  \"last_updated\": \"2025-09-08t10:00:00z\"\n}\n```\n\n## backup formats\n\n### full backup format\n```json\n{\n  \"backup_metadata\": {\n    \"version\": \"1.0.0\",\n    \"created_at\": \"2025-09-08t10:00:00z\",\n    \"application_version\": \"1.2.3\",\n    \"backup_type\": \"full\",\n    \"encrypted\": true,\n    \"compression\": \"gzip\"\n  },\n  \"database_dump\": \"base64_encoded_encrypted_data\",\n  \"file_attachments\": {\n    \"file1.pdf\": \"base64_encoded_file_data\",\n    \"image1.png\": \"base64_encoded_file_data\"\n  },\n  \"settings\": {\n    \"user_preferences\": {},\n    \"feature_configs\": {}\n  }\n}\n```\n\n### incremental backup format\n```json\n{\n  \"backup_metadata\": {\n    \"version\": \"1.0.0\",\n    \"created_at\": \"2025-09-08t10:00:00z\",\n    \"backup_type\": \"incremental\",\n    \"since\": \"2025-09-07t10:00:00z\",\n    \"encrypted\": true\n  },\n  \"changed_records\": {\n    \"passwords\": [\n      {\n        \"id\": \"uuid-1234\",\n        \"operation\": \"update\",\n        \"data\": \"encrypted_data\"\n      }\n    ],\n    \"notes\": [\n      {\n        \"id\": \"uuid-5678\",\n        \"operation\": \"create\",\n        \"data\": \"encrypted_data\"\n      }\n    ]\n  },\n  \"deleted_records\": {\n    \"passwords\": [\"uuid-9999\"],\n    \"notes\": []\n  }\n}\n```\n\n## encryption formats\n\n### encrypted data structure\n```json\n{\n  \"algorithm\": \"aes-256-gcm\",\n  \"key_derivation\": {\n    \"method\": \"pbkdf2\",\n    \"iterations\": 100000,\n    \"salt\": \"base64_encoded_salt\"\n  },\n  \"encrypted_data\": \"base64_encoded_encrypted_data\",\n  \"auth_tag\": \"base64_encoded_auth_tag\",\n  \"nonce\": \"base64_encoded_nonce\"\n}\n```\n\n### key storage format\n```json\n{\n  \"key_id\": \"uuid\",\n  \"algorithm\": \"rsa-2048\",\n  \"purpose\": \"data_encryption\",\n  \"created_at\": \"2025-09-08t10:00:00z\",\n  \"expires_at\": null,\n  \"public_key\": \"base64_encoded_public_key\",\n  \"private_key_encrypted\": \"base64_encoded_encrypted_private_key\"\n}\n```\n\n## api data formats\n\n### rest api response format\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"12345\",\n    \"type\": \"password\",\n    \"attributes\": {\n      \"site_name\": \"example.com\",\n      \"username\": \"user@example.com\",\n      \"created_at\": \"2025-09-08t10:00:00z\"\n    }\n  },\n  \"meta\": {\n    \"version\": \"1.0\",\n    \"timestamp\": \"2025-09-08t10:00:00z\"\n  }\n}\n```\n\n### error response format\n```json\n{\n  \"success\": false,\n  \"error\": {\n    \"code\": \"validation_error\",\n    \"message\": \"invalid input data\",\n    \"details\": {\n      \"field\": \"password\",\n      \"reason\": \"password too short\"\n    }\n  },\n  \"meta\": {\n    \"timestamp\": \"2025-09-08t10:00:00z\",\n    \"request_id\": \"req-12345\"\n  }\n}\n```\n\n## migration formats\n\n### database migration script\n```sql\n-- migration: 001_add_tags_to_passwords\n-- up\nalter table passwords add column tags text;\ncreate index idx_passwords_tags on passwords(tags);\n\n-- down\ndrop index idx_passwords_tags;\nalter table passwords drop column tags;\n```\n\n### data migration format\n```json\n{\n  \"migration_id\": \"001_add_tags_to_passwords\",\n  \"version_from\": \"1.0.0\",\n  \"version_to\": \"1.1.0\",\n  \"operations\": [\n    {\n      \"type\": \"add_column\",\n      \"table\": \"passwords\",\n      \"column\": \"tags\",\n      \"data_type\": \"text\"\n    },\n    {\n      \"type\": \"create_index\",\n      \"table\": \"passwords\",\n      \"columns\": [\"tags\"],\n      \"name\": \"idx_passwords_tags\"\n    }\n  ],\n  \"rollback\": [\n    {\n      \"type\": \"drop_index\",\n      \"name\": \"idx_passwords_tags\"\n    },\n    {\n      \"type\": \"drop_column\",\n      \"table\": \"passwords\",\n      \"column\": \"tags\"\n    }\n  ]\n}\n```\n\n---\n\n*last updated: september 8, 2025*"
    },
    {
      "path": "user/troubleshooting.md",
      "title": "Troubleshooting Guide",
      "description": "Solutions for common issues with Westfall Personal Assistant",
      "category": "user",
      "tags": [
        "troubleshooting",
        "help",
        "issues",
        "bugs",
        "support"
      ],
      "priority": 8,
      "word_count": 1834,
      "last_updated": "2025-09-08",
      "search_text": "troubleshooting guide solutions for common issues with westfall personal assistant # troubleshooting guide\n\nthis guide helps you resolve common issues with westfall personal assistant. if you can't find a solution here, check our [faq](./faq.md) or [contact support](#getting-additional-help).\n\n## before you start\n\n### quick diagnostics\n\ntry these steps first before diving into specific troubleshooting:\n\n1. **restart the application**\n   - close westfall personal assistant completely\n   - wait 10 seconds\n   - reopen the application\n\n2. **check system requirements**\n   - python 3.8 or higher\n   - 4gb ram minimum (8gb recommended)\n   - 2gb available disk space\n   - internet connection for online features\n\n3. **update to latest version**\n   - check for updates in settings → about\n   - download latest version from github releases\n   - back up your data before updating\n\n### gathering information\n\nwhen reporting issues, please include:\n\n- **operating system**: windows/macos/linux version\n- **application version**: found in settings → about\n- **error messages**: exact text of any error messages\n- **steps to reproduce**: what you were doing when the issue occurred\n- **screenshots**: visual evidence of the problem\n- **log files**: located in application data directory\n\n## installation issues\n\n### application won't install\n\n#### symptoms\n- installer fails to complete\n- permission errors during installation\n- missing dependency errors\n\n#### solutions\n\n**for windows:**\n1. **run as administrator**\n   - right-click installer\n   - select \"run as administrator\"\n   - follow installation prompts\n\n2. **check windows defender/antivirus**\n   - temporarily disable real-time protection\n   - add installer to antivirus exceptions\n   - re-run installation\n\n3. **install visual c++ redistributables**\n   ```\n   download from microsoft:\n   - visual c++ 2019 redistributable (x64)\n   - visual c++ 2015-2022 redistributable\n   ```\n\n**for macos:**\n1. **allow unknown developers**\n   - system preferences → security & privacy\n   - allow apps downloaded from \"app store and identified developers\"\n   - or right-click app → open → open\n\n2. **install xcode command line tools**\n   ```bash\n   xcode-select --install\n   ```\n\n**for linux:**\n1. **install dependencies**\n   ```bash\n   # ubuntu/debian\n   sudo apt update\n   sudo apt install python3 python3-pip python3-dev\n\n   # centos/rhel\n   sudo yum install python3 python3-pip python3-devel\n\n   # arch linux\n   sudo pacman -s python python-pip\n   ```\n\n### application won't start\n\n#### symptoms\n- application icon appears but no window opens\n- immediate crash on startup\n- error messages about missing modules\n\n#### solutions\n\n1. **check python installation**\n   ```bash\n   python --version\n   # should show python 3.8 or higher\n   ```\n\n2. **install missing dependencies**\n   ```bash\n   cd westfallpersonalassistant\n   pip install -r requirements.txt\n   ```\n\n3. **run from command line** (to see error messages)\n   ```bash\n   cd westfallpersonalassistant\n   python main.py\n   ```\n\n4. **check file permissions**\n   ```bash\n   # make main.py executable\n   chmod +x main.py\n   ```\n\n5. **clear application data** (last resort)\n   - backup important data first\n   - delete application data directory\n   - restart application to regenerate\n\n## startup and login issues\n\n### forgot master password\n\n#### symptoms\n- cannot access encrypted data\n- application asks for password but you don't remember it\n\n#### solutions\n\n**unfortunately, there's no way to recover a forgotten master password** - this is by design for security.\n\nyour options:\n1. **reset application data**\n   - this will delete all encrypted data\n   - backup any unencrypted files first\n   - delete the data directory\n   - restart and set up as new installation\n\n2. **try common variations**\n   - variations you might have used\n   - different capitalization\n   - numbers or symbols you commonly add\n\n3. **check for backups**\n   - look for exported data files\n   - check if you wrote it down somewhere\n   - see if you have unencrypted notes with hints\n\n**prevention**: always write down your master password in a secure location!\n\n### application crashes on startup\n\n#### symptoms\n- app starts then immediately closes\n- error messages about database corruption\n- blank screen or freezing\n\n#### solutions\n\n1. **check log files**\n   - **windows**: `%appdata%/westfallpersonalassistant/logs/`\n   - **macos**: `~/library/application support/westfallpersonalassistant/logs/`\n   - **linux**: `~/.local/share/westfallpersonalassistant/logs/`\n\n2. **start in safe mode**\n   ```bash\n   python main.py --safe-mode\n   ```\n\n3. **repair database**\n   ```bash\n   python main.py --repair-db\n   ```\n\n4. **clear cache**\n   - delete temporary files in data directory\n   - keep database files but remove cache folders\n\n## feature-specific issues\n\n### ai assistant not working\n\n#### symptoms\n- ai doesn't respond to questions\n- error messages about api failures\n- slow or incomplete responses\n\n#### solutions\n\n1. **check internet connection**\n   - test with browser\n   - try different network\n   - check firewall settings\n\n2. **verify api keys**\n   - go to settings → ai → api keys\n   - ensure openai api key is correct\n   - test api key validity\n   - check usage limits and billing\n\n3. **switch ai modes**\n   - try different thinking modes\n   - use local models if available\n   - check model download status\n\n4. **clear ai cache**\n   - settings → ai → clear cache\n   - restart application\n   - try simple query first\n\n### email features not working\n\n#### symptoms\n- cannot connect to email servers\n- emails not syncing\n- authentication failures\n\n#### solutions\n\n1. **check email settings**\n   - verify imap/smtp server addresses\n   - confirm port numbers and security settings\n   - test with email client like outlook or apple mail\n\n2. **update app passwords**\n   - gmail: use app-specific passwords\n   - outlook: enable less secure apps or use oauth\n   - yahoo: generate app password\n\n3. **firewall and security**\n   - allow application through firewall\n   - check antivirus email protection\n   - try different network\n\n4. **server settings examples**\n\n   **gmail:**\n   ```\n   imap: imap.gmail.com:993 (ssl)\n   smtp: smtp.gmail.com:587 (tls)\n   ```\n\n   **outlook/hotmail:**\n   ```\n   imap: outlook.office365.com:993 (ssl)\n   smtp: smtp-mail.outlook.com:587 (tls)\n   ```\n\n### password manager issues\n\n#### symptoms\n- cannot save or retrieve passwords\n- database errors\n- encryption/decryption failures\n\n#### solutions\n\n1. **database repair**\n   ```bash\n   python main.py --repair-passwords\n   ```\n\n2. **check master password**\n   - ensure correct password is entered\n   - try typing slowly and carefully\n   - check caps lock and keyboard layout\n\n3. **backup and restore**\n   - export passwords to secure file\n   - recreate password database\n   - import from backup\n\n4. **check disk space**\n   - ensure sufficient free space\n   - clear temporary files\n   - move large files elsewhere\n\n### weather and news not updating\n\n#### symptoms\n- stale weather data\n- news feeds not refreshing\n- api error messages\n\n#### solutions\n\n1. **check api keys**\n   - settings → api keys\n   - verify openweathermap key\n   - confirm newsapi key\n   - test keys in browser\n\n2. **network connectivity**\n   - test internet connection\n   - try vpn if available\n   - check dns settings\n\n3. **update intervals**\n   - settings → data → update intervals\n   - force manual refresh\n   - check last update timestamps\n\n## performance issues\n\n### slow performance\n\n#### symptoms\n- application takes long to start\n- features respond slowly\n- high cpu or memory usage\n\n#### solutions\n\n1. **system resources**\n   - close unnecessary applications\n   - check available ram (task manager/activity monitor)\n   - ensure adequate disk space\n   - restart computer\n\n2. **database optimization**\n   ```bash\n   python main.py --optimize-db\n   ```\n\n3. **reduce background tasks**\n   - settings → performance\n   - disable automatic updates for non-critical features\n   - reduce sync frequencies\n\n4. **clear cache and temporary files**\n   - delete cache directories\n   - clear browser data within app\n   - remove old log files\n\n### high memory usage\n\n#### symptoms\n- computer becomes sluggish\n- other applications crash\n- memory usage in task manager is high\n\n#### solutions\n\n1. **monitor memory usage**\n   - check task manager/activity monitor\n   - identify which features use most memory\n   - close unused features\n\n2. **optimize settings**\n   - settings → performance → memory\n   - reduce cache sizes\n   - limit concurrent operations\n   - disable memory-intensive features\n\n3. **regular maintenance**\n   - restart application daily\n   - clear caches regularly\n   - update to latest version\n\n### application freezing\n\n#### symptoms\n- ui becomes unresponsive\n- cannot click buttons or menus\n- no response to keyboard input\n\n#### solutions\n\n1. **wait and force close**\n   - wait 30 seconds for operation to complete\n   - force close if necessary:\n     - **windows**: ctrl+alt+del → task manager\n     - **macos**: cmd+option+esc → force quit\n     - **linux**: alt+f4 or kill process\n\n2. **check for conflicts**\n   - disable antivirus temporarily\n   - close conflicting applications\n   - check for windows updates\n\n3. **safe mode restart**\n   ```bash\n   python main.py --safe-mode\n   ```\n\n## data and file issues\n\n### cannot access data\n\n#### symptoms\n- data appears missing\n- cannot open notes or passwords\n- database connection errors\n\n#### solutions\n\n1. **check data directory**\n   - verify data files exist\n   - check file permissions\n   - look for corruption\n\n2. **backup recovery**\n   - look for automatic backups\n   - check backup directory\n   - restore from most recent backup\n\n3. **database recovery**\n   ```bash\n   python main.py --recover-data\n   ```\n\n### export/import problems\n\n#### symptoms\n- export fails with errors\n- import doesn't work correctly\n- data corruption during transfer\n\n#### solutions\n\n1. **file format issues**\n   - use supported formats (json, csv, xml)\n   - check file encoding (utf-8)\n   - verify file integrity\n\n2. **size limitations**\n   - break large files into smaller chunks\n   - export specific data ranges\n   - use compression for large exports\n\n3. **permission issues**\n   - run as administrator/root\n   - check destination folder permissions\n   - use different export location\n\n## network and security issues\n\n### firewall blocking application\n\n#### symptoms\n- cannot connect to internet services\n- timeout errors\n- partial feature functionality\n\n#### solutions\n\n1. **windows firewall**\n   - control panel → windows defender firewall\n   - allow an app through firewall\n   - add westfallpersonalassistant.exe\n\n2. **third-party firewalls**\n   - check antivirus firewall settings\n   - add application to exceptions\n   - configure network access rules\n\n3. **network configuration**\n   - check proxy settings\n   - configure vpn if needed\n   - test with different network\n\n### ssl/tls certificate issues\n\n#### symptoms\n- certificate verification errors\n- https connection failures\n- security warnings\n\n#### solutions\n\n1. **update certificates**\n   ```bash\n   # update system certificates\n   pip install --upgrade certifi\n   ```\n\n2. **system date/time**\n   - ensure correct system time\n   - check timezone settings\n   - sync with internet time server\n\n3. **network configuration**\n   - check corporate proxy settings\n   - bypass proxy for local addresses\n   - contact network administrator\n\n## getting additional help\n\n### self-help resources\n\n1. **built-in help**\n   - press f1 for context help\n   - use ai assistant for questions\n   - check tooltips and help text\n\n2. **documentation**\n   - [user guide](./getting-started.md)\n   - [feature guides](./features/)\n   - [faq](./faq.md)\n\n3. **community resources**\n   - [github discussions](https://github.com/westfall-softwares/westfallpersonalassistant/discussions)\n   - [issue tracker](https://github.com/westfall-softwares/westfallpersonalassistant/issues)\n\n### reporting issues\n\nwhen reporting issues on github:\n\n1. **search existing issues**\n   - check if issue already reported\n   - add to existing discussion if relevant\n\n2. **use issue template**\n   - fill out all sections completely\n   - include reproduction steps\n   - attach relevant files\n\n3. **provide complete information**\n   - operating system and version\n   - application version\n   - error messages (exact text)\n   - log files (if applicable)\n   - screenshots or screen recordings\n\n### log file locations\n\n**windows:**\n```\n%appdata%\\westfallpersonalassistant\\logs\\\n```\n\n**macos:**\n```\n~/library/application support/westfallpersonalassistant/logs/\n```\n\n**linux:**\n```\n~/.local/share/westfallpersonalassistant/logs/\n```\n\n### emergency data recovery\n\nif you have a critical data loss:\n\n1. **stop using the application immediately**\n2. **do not restart or reinstall**\n3. **create a backup of the entire data directory**\n4. **contact support with details**\n5. **wait for guidance before taking further action**\n\n### prevention tips\n\n- **regular backups**: export important data weekly\n- **keep updated**: install updates promptly\n- **monitor resources**: watch system performance\n- **document passwords**: store master password securely\n- **test restores**: verify backups work correctly\n\nremember: prevention is better than recovery. regular maintenance and good backup practices will help you avoid most issues.\n\n---\n\n*last updated: september 8, 2025*"
    },
    {
      "path": "user/faq.md",
      "title": "Frequently Asked Questions",
      "description": "Common questions and answers about Westfall Personal Assistant",
      "category": "user",
      "tags": [
        "faq",
        "questions",
        "help",
        "common-issues"
      ],
      "priority": 9,
      "word_count": 1444,
      "last_updated": "2025-09-08",
      "search_text": "frequently asked questions common questions and answers about westfall personal assistant # frequently asked questions\n\nfind answers to the most common questions about westfall personal assistant.\n\n## general questions\n\n### what is westfall personal assistant?\n\nwestfall personal assistant is a comprehensive, ai-powered desktop application that combines multiple productivity tools while keeping your data secure and private on your local machine. it includes features like email management, password storage, note-taking, finance tracking, and an intelligent ai assistant.\n\n### is my data secure?\n\nyes, security is our top priority:\n- all sensitive data is encrypted using military-grade aes-256 encryption\n- your master password is never stored - it's used to derive encryption keys\n- data stays on your local machine unless you explicitly use cloud features\n- no personal data is sent to external services without your permission\n\n### what platforms are supported?\n\nwestfall personal assistant runs on:\n- **windows** 10 and 11 (64-bit)\n- **macos** 10.14 (mojave) and later\n- **linux** distributions with python 3.8+ support\n\n### how much does it cost?\n\nwestfall personal assistant is completely free and open-source, licensed under the mit license. you can use it for personal or commercial purposes without any restrictions.\n\n## installation and setup\n\n### what are the system requirements?\n\n**minimum requirements:**\n- python 3.8 or higher\n- 4gb ram\n- 2gb available disk space\n- internet connection (for initial setup and online features)\n\n**recommended:**\n- python 3.10 or higher\n- 8gb ram\n- 5gb available disk space\n- stable internet connection\n\n### why won't the application start?\n\ncommon causes and solutions:\n\n1. **python not installed or wrong version**\n   - install python 3.8+ from python.org\n   - verify with `python --version`\n\n2. **missing dependencies**\n   ```bash\n   pip install -r requirements.txt\n   ```\n\n3. **permission issues**\n   - run as administrator (windows) or with sudo (linux/macos)\n   - check file permissions on installation directory\n\n4. **antivirus blocking**\n   - add application to antivirus exceptions\n   - temporarily disable real-time protection during installation\n\n### can i install without internet?\n\nthe initial installation requires internet to download dependencies. however, once installed, most features work offline. only weather, news, and external ai features require internet connectivity.\n\n## security and privacy\n\n### what happens if i forget my master password?\n\nunfortunately, there's no way to recover a forgotten master password - this is by design for security. if you forget it, you'll need to:\n\n1. reset the application (losing all encrypted data)\n2. set up the application again with a new master password\n3. restore data from any unencrypted backups you may have\n\n**prevention**: always write down your master password in a secure location!\n\n### can i change my master password?\n\nyes, you can change your master password:\n\n1. go to settings → security → change master password\n2. enter your current password\n3. enter and confirm your new password\n4. the application will re-encrypt all data with the new password\n\n### how often should i backup my data?\n\nwe recommend backing up your data:\n- **daily** for critical data (passwords, important notes)\n- **weekly** for general data\n- **before major updates** to the application\n- **before changing your master password**\n\n### where is my data stored?\n\ndata is stored locally on your computer:\n\n- **windows**: `%appdata%\\westfallpersonalassistant\\`\n- **macos**: `~/library/application support/westfallpersonalassistant/`\n- **linux**: `~/.local/share/westfallpersonalassistant/`\n\n## features and usage\n\n### how do i use the ai assistant?\n\nthe ai assistant can be accessed in several ways:\n\n- **keyboard**: press `ctrl+space` anywhere in the application\n- **search bar**: type `ai:` or `?` followed by your question\n- **sidebar**: click the \"ai assistant\" button\n\nthe ai has three thinking modes:\n- **normal**: quick responses for simple questions\n- **thinking**: deeper analysis for complex problems\n- **research**: comprehensive research and detailed explanations\n\n### can i import data from other applications?\n\nyes, you can import data from many popular applications:\n\n**passwords**: \n- lastpass, 1password, bitwarden, chrome, firefox, safari\n- format: csv, json, or encrypted exports\n\n**notes**: \n- evernote, onenote, apple notes, google keep\n- format: html, markdown, or text files\n\n**email**: \n- any imap-compatible email provider\n- automatic setup for gmail, outlook, yahoo\n\n**contacts**: \n- vcard (.vcf) files from any contact manager\n\n### how do i set up email?\n\n1. open email from the sidebar\n2. click \"add account\"\n3. enter your email and password\n4. the app will try to auto-detect settings\n5. if auto-detection fails, manually enter imap/smtp settings\n6. test the connection and save\n\nfor major providers, settings are automatically configured.\n\n### why isn't my weather/news updating?\n\nthis usually indicates an api key issue:\n\n1. check your internet connection\n2. verify api keys in settings → api keys\n3. ensure api keys are valid and not expired\n4. check if you've exceeded api usage limits\n5. try refreshing manually from the feature settings\n\n## troubleshooting\n\n### the application is running slowly\n\ncommon solutions:\n\n1. **restart the application** - clears memory and cache\n2. **check system resources** - close other memory-intensive programs\n3. **clear application cache** - settings → advanced → clear cache\n4. **optimize database** - settings → maintenance → optimize database\n5. **update to latest version** - newer versions often include performance improvements\n\n### i can't sync my calendar\n\ncalendar sync issues are usually related to:\n\n1. **authentication** - re-enter calendar service credentials\n2. **permissions** - ensure calendar access is enabled\n3. **two-factor authentication** - use app-specific passwords\n4. **firewall** - allow application through firewall\n5. **service outages** - check if the calendar service is experiencing issues\n\n### the ai assistant isn't responding\n\ncheck these potential issues:\n\n1. **internet connection** - required for cloud ai features\n2. **api keys** - verify openai api key is correctly configured\n3. **api limits** - check if you've exceeded usage limits\n4. **local models** - try switching to local ai models\n5. **service status** - check openai service status\n\n### how do i report a bug?\n\nto report bugs effectively:\n\n1. **check existing issues** on our [github issues page](https://github.com/westfall-softwares/westfallpersonalassistant/issues)\n2. **gather information**:\n   - operating system and version\n   - application version (settings → about)\n   - steps to reproduce the issue\n   - error messages (exact text)\n   - screenshots if relevant\n3. **create a new issue** with all the information\n4. **include log files** if requested by developers\n\n## advanced usage\n\n### can i create custom themes?\n\nyes, you can customize the appearance:\n\n1. go to settings → appearance → custom themes\n2. create a new theme or modify existing ones\n3. adjust colors, fonts, and layout options\n4. save and apply your custom theme\n\ntheme files are stored in the `themes/` directory and can be shared with other users.\n\n### how do i create plugins?\n\nwestfall personal assistant supports plugins for extending functionality:\n\n1. see our [plugin development guide](../developer/plugins/)\n2. use the plugin template in the `plugins/template/` directory\n3. follow the api documentation for available hooks\n4. test your plugin in development mode\n5. submit to the plugin marketplace or distribute independently\n\n### can i run multiple instances?\n\nyes, but with limitations:\n\n- only one instance can access encrypted data at a time\n- use different data directories for truly independent instances\n- be careful with file locking and database access\n- consider using user profiles instead for most use cases\n\n### how do i automate tasks?\n\nthe application supports automation through:\n\n1. **ai assistant** - natural language automation requests\n2. **scheduled tasks** - settings → automation → scheduled tasks\n3. **event triggers** - respond to application events\n4. **plugins** - custom automation through plugins\n5. **api integration** - external automation tools\n\n## getting help\n\n### where can i get additional support?\n\n- **documentation**: comprehensive guides in the help section (f1)\n- **ai assistant**: ask questions directly in the application\n- **community**: [github discussions](https://github.com/westfall-softwares/westfallpersonalassistant/discussions)\n- **bug reports**: [github issues](https://github.com/westfall-softwares/westfallpersonalassistant/issues)\n- **feature requests**: submit via github issues with \"enhancement\" label\n\n### how can i contribute to the project?\n\nwe welcome contributions:\n\n1. **code contributions** - see our [contributing guide](../developer/contributing.md)\n2. **documentation** - improve guides and help content\n3. **translations** - help translate the interface\n4. **bug reports** - report issues you encounter\n5. **feature suggestions** - propose new functionality\n6. **community support** - help other users in discussions\n\n### is there a mobile app?\n\ncurrently, westfall personal assistant is desktop-only. however:\n\n- the application works well on tablets with desktop operating systems\n- we're considering mobile companion apps for basic functions\n- web interface for remote access is planned for future releases\n- you can access some features through the built-in web browser remotely\n\n### how often is the application updated?\n\n- **security updates**: released immediately when needed\n- **bug fixes**: released in minor versions every 2-4 weeks\n- **new features**: released in major versions every 2-3 months\n- **documentation**: updated continuously\n\nyou'll be notified of available updates when you start the application.\n\n---\n\n*last updated: september 8, 2025*"
    },
    {
      "path": "_templates/reference.md",
      "title": "API Reference: [API Name]",
      "description": "Complete API reference for [API Name]",
      "category": "developer",
      "tags": [
        "api",
        "reference",
        "developer"
      ],
      "priority": 10,
      "word_count": 418,
      "last_updated": "2025-09-08",
      "search_text": "api reference: [api name] complete api reference for [api name] # [api name] api reference\n\ncomplete reference documentation for the [api name] api.\n\n## overview\n\nbrief description of what this api provides and its main use cases.\n\n## base url\n\n```\n/api/v1/[endpoint]\n```\n\n## authentication\n\ndescribe authentication requirements if any.\n\n## endpoints\n\n### endpoint 1: [endpoint name]\n\n#### description\n\nwhat this endpoint does.\n\n#### http method and url\n\n```http\npost /api/v1/endpoint\n```\n\n#### request parameters\n\n| parameter | type | required | description |\n|-----------|------|----------|-------------|\n| `param1` | string | yes | description of param1 |\n| `param2` | integer | no | description of param2 |\n\n#### request body\n\n```json\n{\n  \"field1\": \"string\",\n  \"field2\": 123,\n  \"field3\": {\n    \"nested_field\": \"value\"\n  }\n}\n```\n\n#### response\n\n**success response (200 ok):**\n\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"12345\",\n    \"result\": \"operation completed\"\n  }\n}\n```\n\n**error response (400 bad request):**\n\n```json\n{\n  \"success\": false,\n  \"error\": {\n    \"code\": \"invalid_parameter\",\n    \"message\": \"parameter 'param1' is required\"\n  }\n}\n```\n\n#### example\n\n```python\nimport requests\n\nresponse = requests.post(\n    \"http://localhost:8000/api/v1/endpoint\",\n    json={\n        \"param1\": \"value1\",\n        \"param2\": 123\n    }\n)\n\nif response.status_code == 200:\n    data = response.json()\n    print(data[\"data\"][\"result\"])\n```\n\n### endpoint 2: [another endpoint]\n\n#### description\n\nwhat this endpoint does.\n\n#### http method and url\n\n```http\nget /api/v1/another-endpoint/{id}\n```\n\n#### path parameters\n\n| parameter | type | description |\n|-----------|------|-------------|\n| `id` | string | unique identifier |\n\n#### query parameters\n\n| parameter | type | required | description |\n|-----------|------|----------|-------------|\n| `limit` | integer | no | number of results (default: 10) |\n| `offset` | integer | no | results offset (default: 0) |\n\n#### response\n\n```json\n{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"1\",\n      \"name\": \"item 1\"\n    }\n  ],\n  \"pagination\": {\n    \"total\": 100,\n    \"limit\": 10,\n    \"offset\": 0\n  }\n}\n```\n\n## error codes\n\n| code | http status | description |\n|------|-------------|-------------|\n| `invalid_parameter` | 400 | required parameter missing or invalid |\n| `not_found` | 404 | resource not found |\n| `internal_error` | 500 | internal server error |\n\n## rate limiting\n\ndescribe any rate limiting policies.\n\n## sdk examples\n\n### python\n\n```python\nfrom westfall_assistant import westfallapi\n\napi = westfallapi()\nresult = api.endpoint_method(param1=\"value\")\n```\n\n### javascript\n\n```javascript\nimport { westfallapi } from 'westfall-assistant-sdk';\n\nconst api = new westfallapi();\nconst result = await api.endpointmethod({ param1: 'value' });\n```\n\n## webhooks\n\nif the api supports webhooks, document them here.\n\n## changelog\n\n### version 1.1.0\n- added new endpoint\n- fixed bug in existing endpoint\n\n### version 1.0.0\n- initial api release\n\n## see also\n\n- [developer documentation home](../index.md)\n- [sdk documentation](../sdk.md)\n\n---\n\n*last updated: [date]*"
    },
    {
      "path": "_templates/guide.md",
      "title": "Feature Guide: [Feature Name]",
      "description": "Complete guide to using [Feature Name] in Westfall Personal Assistant",
      "category": "user",
      "tags": [
        "feature",
        "guide",
        "user"
      ],
      "priority": 10,
      "word_count": 312,
      "last_updated": "2025-09-08",
      "search_text": "feature guide: [feature name] complete guide to using [feature name] in westfall personal assistant # [feature name] guide\n\nlearn how to use [feature name] to enhance your productivity with westfall personal assistant.\n\n## what is [feature name]?\n\nbrief explanation of what this feature does and why it's useful.\n\n## getting started\n\n### accessing [feature name]\n\nexplain how to open/access this feature:\n- menu navigation\n- keyboard shortcuts\n- button locations\n\n### first time setup\n\nif there's any initial configuration required:\n\n1. step 1\n2. step 2\n3. step 3\n\n## basic usage\n\n### core functionality\n\nexplain the main ways to use this feature.\n\n#### task 1: [primary use case]\n\n1. step-by-step instructions\n2. include screenshots if available\n3. expected results\n\n#### task 2: [secondary use case]\n\n1. step-by-step instructions\n2. include screenshots if available\n3. expected results\n\n## advanced features\n\n### advanced task 1\n\nfor more experienced users:\n\n1. advanced step 1\n2. advanced step 2\n\n### integration with other features\n\nhow this feature works with other parts of the application.\n\n## keyboard shortcuts\n\n| shortcut | action |\n|----------|--------|\n| `ctrl+x` | action description |\n| `ctrl+y` | action description |\n\n## configuration options\n\n### settings location\n\nwhere to find settings for this feature.\n\n### available options\n\n- **option 1**: description\n- **option 2**: description\n- **option 3**: description\n\n## tips and tricks\n\n- 💡 **tip 1**: helpful tip\n- 💡 **tip 2**: helpful tip\n- 💡 **tip 3**: helpful tip\n\n## troubleshooting\n\n### common issues\n\n#### issue: [problem description]\n\n**symptoms**: what the user experiences.\n\n**solution**: \n1. step 1\n2. step 2\n\n#### issue: [another problem]\n\n**symptoms**: what the user experiences.\n\n**solution**: \n1. step 1\n2. step 2\n\n## faq\n\n**q: common question about this feature?**\na: answer to the question.\n\n**q: another common question?**\na: answer to the question.\n\n## related features\n\n- [related feature 1](./related-feature.md)\n- [related feature 2](./related-feature.md)\n\n## see also\n\n- [user documentation home](../index.md)\n- [troubleshooting guide](../troubleshooting.md)\n\n---\n\n*last updated: [date]*"
    },
    {
      "path": "_templates/page.md",
      "title": "Page Title",
      "description": "Brief description of the page content",
      "category": "user|developer|installation|configuration|reference",
      "tags": [
        "tag1",
        "tag2",
        "tag3"
      ],
      "priority": 10,
      "word_count": 135,
      "last_updated": "2025-09-08",
      "search_text": "page title brief description of the page content # page title\n\nbrief introduction to the topic.\n\n## overview\n\nprovide context and what the reader will learn.\n\n## prerequisites\n\nlist any requirements or previous knowledge needed.\n\n## main content\n\nstructure your content with clear headings and subheadings.\n\n### subsection 1\n\ncontent for this section.\n\n### subsection 2\n\ncontent for this section.\n\n## examples\n\nprovide practical examples where applicable.\n\n```bash\n# example command\ncommand --option value\n```\n\n## tips and best practices\n\n- tip 1\n- tip 2\n- tip 3\n\n## common issues\n\n### issue 1\n\n**problem**: description of the issue.\n\n**solution**: how to resolve it.\n\n### issue 2\n\n**problem**: description of the issue.\n\n**solution**: how to resolve it.\n\n## related topics\n\n- [related topic 1](../path/to/related-topic.md)\n- [related topic 2](../path/to/related-topic.md)\n\n## see also\n\n- [external resource](https://example.com)\n- [another external resource](https://example.com)\n\n---\n\n*last updated: [date]*"
    },
    {
      "path": "_templates/troubleshooting.md",
      "title": "Troubleshooting: [Issue Category]",
      "description": "Solutions for common issues in [Issue Category]",
      "category": "user",
      "tags": [
        "troubleshooting",
        "help",
        "issues"
      ],
      "priority": 10,
      "word_count": 611,
      "last_updated": "2025-09-08",
      "search_text": "troubleshooting: [issue category] solutions for common issues in [issue category] # troubleshooting: [issue category]\n\ncommon issues and solutions for [issue category].\n\n## before you start\n\n### quick diagnostics\n\ntry these steps first:\n\n1. **restart the application** - close and reopen westfall personal assistant\n2. **check system requirements** - ensure your system meets minimum requirements\n3. **update to latest version** - make sure you're running the latest release\n\n### gathering information\n\nwhen reporting issues, please include:\n\n- operating system and version\n- westfall personal assistant version\n- steps to reproduce the issue\n- error messages (exact text)\n- screenshots if applicable\n\n## common issues\n\n### issue 1: [specific problem]\n\n**symptoms:**\n- what the user experiences\n- error messages shown\n- when the problem occurs\n\n**possible causes:**\n- cause 1\n- cause 2\n- cause 3\n\n**solutions:**\n\n#### solution 1: [primary fix]\n\n1. step 1 with clear instructions\n2. step 2 with expected results\n3. step 3 to verify the fix\n\n#### solution 2: [alternative fix]\n\n1. alternative step 1\n2. alternative step 2\n\n**prevention:**\nhow to avoid this issue in the future.\n\n### issue 2: [another problem]\n\n**symptoms:**\n- description of the problem\n- when it happens\n\n**quick fix:**\n```bash\n# command or action to resolve quickly\ncommand --fix-issue\n```\n\n**detailed solution:**\n1. detailed step 1\n2. detailed step 2\n3. verification step\n\n### issue 3: [third problem]\n\n**symptoms:**\n- problem description\n\n**root cause:**\nexplanation of why this happens.\n\n**solution:**\n1. step 1\n2. step 2\n\n## advanced troubleshooting\n\n### log files\n\n**location:**\n- windows: `%appdata%/westfallpersonalassistant/logs/`\n- macos: `~/library/application support/westfallpersonalassistant/logs/`\n- linux: `~/.local/share/westfallpersonalassistant/logs/`\n\n**what to look for:**\n- error messages with timestamps\n- stack traces\n- warning messages\n\n### debug mode\n\nto enable debug mode:\n\n1. open settings\n2. go to advanced → debug\n3. enable \"debug logging\"\n4. restart the application\n\n### safe mode\n\nto start in safe mode:\n\n1. close the application\n2. hold shift while starting\n3. select \"safe mode\" when prompted\n\n## performance issues\n\n### slow performance\n\n**common causes:**\n- low memory\n- large databases\n- background processes\n\n**solutions:**\n1. close unnecessary applications\n2. restart the computer\n3. check available disk space\n4. clear temporary files\n\n### high memory usage\n\n**diagnosis:**\n1. open task manager/activity monitor\n2. check westfall personal assistant memory usage\n3. note any memory leaks\n\n**solutions:**\n1. restart the application\n2. reduce the number of open features\n3. clear cache files\n\n## network issues\n\n### connection problems\n\n**symptoms:**\n- cannot fetch weather data\n- news feeds not updating\n- ai features not working\n\n**solutions:**\n1. check internet connection\n2. verify firewall settings\n3. test with different network\n4. check proxy settings\n\n### api key issues\n\n**symptoms:**\n- api-related features not working\n- authentication errors\n\n**solutions:**\n1. verify api keys in settings\n2. check api key validity\n3. regenerate api keys if needed\n\n## data issues\n\n### database corruption\n\n**symptoms:**\n- application crashes on startup\n- data appears corrupted\n- error messages about database\n\n**solutions:**\n1. backup current data\n2. use database repair tool\n3. restore from backup if needed\n\n### lost data\n\n**recovery options:**\n1. check automatic backups\n2. look in temporary files\n3. use data recovery tools\n\n## getting additional help\n\n### self-help resources\n\n- [faq](../user/faq.md)\n- [user guides](../user/features/)\n- [community forum](https://github.com/westfall-softwares/westfallpersonalassistant/discussions)\n\n### contacting support\n\n1. **github issues**: report bugs and feature requests\n2. **community support**: ask questions in discussions\n3. **documentation feedback**: suggest improvements\n\n### providing feedback\n\nwhen reporting issues:\n\n1. use a clear, descriptive title\n2. provide step-by-step reproduction\n3. include system information\n4. attach relevant log files\n5. add screenshots if helpful\n\n## prevention tips\n\n- keep the application updated\n- regular backups of important data\n- monitor system resources\n- follow best practices from user guides\n\n---\n\n*last updated: [date]*"
    }
  ],
  "categories": [
    "user|developer|installation|configuration|reference",
    "index",
    "developer",
    "reference",
    "installation",
    "user",
    "meta"
  ],
  "tags": [
    "contributing",
    "import",
    "installation",
    "technical",
    "assistant",
    "feature",
    "schemas",
    "guidelines",
    "questions",
    "support",
    "getting-started",
    "writing",
    "developer",
    "tag3",
    "windows",
    "api",
    "community",
    "tag2",
    "home",
    "keyboard",
    "tag1",
    "guide",
    "documentation",
    "chat",
    "index",
    "troubleshooting",
    "settings",
    "common-issues",
    "development",
    "reference",
    "commands",
    "design",
    "standards",
    "configuration",
    "system",
    "beginner",
    "help",
    "faq",
    "shortcuts",
    "style",
    "export",
    "data",
    "issues",
    "files",
    "ai",
    "user",
    "bugs",
    "architecture",
    "setup",
    "formats"
  ],
  "generated": "2025-09-08T05:59:22.796589"
}